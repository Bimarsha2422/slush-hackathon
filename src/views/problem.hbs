{{!-- problem.hbs --}}
<div class="problem-container">
    <div class="problem-header">
        <h2>{{problem.type}} - Level {{problem.level}}</h2>
        <a href="/topics/{{topicName}}" class="back-link">‚Üê Back to {{topicName}}</a>
    </div>

    <div class="problem-content">
        <!-- Problem Statement -->
        <div class="problem-statement latex-content">
            <div class="statement-header">Problem:</div>
            {{{problem.problem}}}
        </div>

        <div class="workspace">
            <!-- Input Type Selector -->
            <div class="input-type-selector">
                <button class="input-mode-btn active" data-mode="text">Plain Text</button>
                <button class="input-mode-btn" data-mode="latex">LaTeX</button>
                <button class="input-mode-btn" data-mode="canvas">Drawing</button>
            </div>

            <!-- Input Areas -->
            <div class="work-section">
                <div class="section-header">Your Solution:</div>
                
                <!-- Text Mode -->
                <div id="textWorkArea" class="work-area-container">
                    <textarea id="mainWorkArea" class="main-work-area" 
                        placeholder="Write your solution steps here..."></textarea>
                </div>
                
                <!-- LaTeX Mode -->
                <div id="latexWorkArea" class="work-area-container hidden">
                    <textarea id="latexInput" class="main-work-area" 
                        placeholder="Write your LaTeX solution here..."></textarea>
                    <div id="latexPreview" class="latex-preview"></div>
                </div>
                
                <!-- Drawing Mode -->
                <div id="canvasWorkArea" class="work-area-container hidden">
                    <div class="canvas-controls">
                        <button id="saveDrawing" class="tool-btn">Save Drawing</button>
                        <button id="clearDrawing" class="tool-btn">Clear</button>
                    </div>
                    <!-- Literally Canvas will be mounted here -->
                    <div id="drawing-area" class="literally-canvas-container"></div>
                </div>
            </div>

            <!-- Help Section -->
            <div class="help-section">
                <div class="section-header">Need Help?</div>
                <textarea id="helpQuery" class="help-query" 
                    placeholder="Ask a specific question or describe where you're stuck..."></textarea>
                
                <div class="help-buttons">
                    <button onclick="getAIHelp('hint')" class="help-btn">üí° Get Hint</button>
                    <button onclick="getAIHelp('nextStep')" class="help-btn">‚û°Ô∏è Next Step</button>
                    <button onclick="getAIHelp('validate')" class="help-btn">‚úÖ Check Work</button>
                    <button onclick="getAIHelp('improve')" class="help-btn">üìù Improve</button>
                </div>

                <div class="response-history">
                    <button onclick="togglePreviousResponses()" class="toggle-btn" id="toggleBtn">
                        Show Previous Responses (0)
                    </button>
                    <div id="previousResponses" class="previous-responses"></div>
                </div>

                <div id="currentResponse" class="current-response"></div>
            </div>
        </div>
    </div>
</div>

<style>
/* Base Styles */
.problem-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background: #1a1a1a;
    color: #e0e0e0;
}

.problem-header h2 {
    margin-bottom: 0.5rem;
}

.back-link {
    color: #4f46e5;
    text-decoration: none;
}

/* Problem Statement */
.problem-statement {
    background: #2d2d2d;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
    border: 1px solid #404040;
}

.statement-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #6366f1;
}

/* Workspace */
.workspace {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.section-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #6366f1;
}

/* Input Type Selector */
.input-type-selector {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.input-mode-btn {
    padding: 0.5rem 1rem;
    background: #2d2d2d;
    border: 1px solid #404040;
    color: #e0e0e0;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background 0.2s;
}

.input-mode-btn:hover {
    background: #383838;
}

.input-mode-btn.active {
    background: #4f46e5;
    border-color: #6366f1;
}

/* Work Areas */
.work-section, .help-section {
    background: #2d2d2d;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #404040;
}

.work-area-container {
    width: 100%;
}

.work-area-container.hidden {
    display: none;
}

.main-work-area, .help-query {
    width: 100%;
    min-height: 120px;
    padding: 15px;
    border: 1px solid #404040;
    border-radius: 8px;
    background: #383838;
    color: #e0e0e0;
    font-family: monospace;
    resize: vertical;
    margin-bottom: 15px;
}

/* Canvas Specific Styles */
.literally-canvas-container {
    width: 100%;
    height: 500px;
    background: white;
    border-radius: 8px;
    margin-top: 10px;
}

.canvas-controls {
    margin-bottom: 10px;
    display: flex;
    gap: 10px;
}

.tool-btn {
    padding: 8px 16px;
    background: #383838;
    border: 1px solid #404040;
    color: #e0e0e0;
    border-radius: 4px;
    cursor: pointer;
}

.tool-btn:hover {
    background: #4f46e5;
}

/* Override Literally Canvas styles for dark theme */
.literally {
    border: 1px solid #404040 !important;
    border-radius: 8px;
}

.literally .lc-picker {
    background-color: #2d2d2d !important;
    border-right: 1px solid #404040 !important;
}

.literally .lc-drawing {
    background-color: white !important;
}

.literally .lc-options {
    background-color: #2d2d2d !important;
}

/* LaTeX Preview */
.latex-preview {
    margin-top: 1rem;
    padding: 1rem;
    background: #2d2d2d;
    border-radius: 0.25rem;
    min-height: 100px;
    border: 1px solid #404040;
}

/* Help Section Styles */
.help-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
    margin-bottom: 20px;
}

.help-btn {
    padding: 12px;
    border: none;
    border-radius: 8px;
    background: #4f46e5;
    color: white;
    cursor: pointer;
    transition: background 0.3s;
    font-size: 14px;
}

.help-btn:hover {
    background: #6366f1;
}

/* Response History */
.toggle-btn {
    width: 100%;
    padding: 8px 16px;
    background: #383838;
    border: 1px solid #4f46e5;
    color: #e0e0e0;
    border-radius: 4px;
    cursor: pointer;
    text-align: left;
    margin-bottom: 10px;
}

.previous-responses {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
}

.previous-responses.expanded {
    max-height: 500px;
    overflow-y: auto;
}

.response-entry {
    padding: 15px;
    margin: 10px 0;
    background: #383838;
    border-left: 4px solid #4f46e5;
    border-radius: 4px;
}

.response-type {
    float: right;
    font-size: 0.8em;
    color: #888;
}

.current-response {
    padding: 15px;
    margin-top: 15px;
    background: #383838;
    border-left: 4px solid #4f46e5;
    border-radius: 4px;
}
</style>

<script>
// Global variables
let responseHistory = [];
let isExpanded = false;
let currentProblemId = '{{topicName}}/{{problemId}}';
let canvasInstance = null;

// Initialize everything when document loads
document.addEventListener('DOMContentLoaded', function() {
    clearHistory();
    initializeInputModes();
    initializeLatexPreview();
});

// Clear response history
function clearHistory() {
    responseHistory = [];
    document.getElementById('previousResponses').innerHTML = '';
    document.getElementById('currentResponse').innerHTML = '';
    document.getElementById('toggleBtn').textContent = 'Show Previous Responses (0)';
}

// Initialize input mode switching
function initializeInputModes() {
    const modeButtons = document.querySelectorAll('.input-mode-btn');
    const workAreas = {
        text: document.getElementById('textWorkArea'),
        latex: document.getElementById('latexWorkArea'),
        canvas: document.getElementById('canvasWorkArea')
    };
    
    modeButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            const mode = btn.dataset.mode;
            
            // Update buttons
            modeButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            // Update visible area
            Object.values(workAreas).forEach(area => area.classList.add('hidden'));
            workAreas[mode].classList.remove('hidden');
            
            // Initialize canvas if needed
            if (mode === 'canvas' && !canvasInstance) {
                initializeCanvas();
            }
        });
    });

    // Canvas control buttons
    document.getElementById('saveDrawing')?.addEventListener('click', saveDrawing);
    document.getElementById('clearDrawing')?.addEventListener('click', clearDrawing);
}

// Initialize canvas
function initializeCanvas() {
    const container = document.getElementById('drawing-area');
    if (!container) return;

    canvasInstance = LC.init(container, {
        imageSize: { width: container.offsetWidth, height: 500 },
        toolbarPosition: 'top',
        defaultStrokeWidth: 2,
        strokeWidths: [1, 2, 3, 5, 10, 15],
        tools: [
            LC.tools.Pencil,
            LC.tools.Eraser,
            LC.tools.Line,
            LC.tools.Rectangle,
            LC.tools.Circle,
            LC.tools.Pan
        ]
    });
}

// Save drawing
function saveDrawing() {
    if (canvasInstance) {
        const dataURL = canvasInstance.getImage().toDataURL();
        // Here you could send this dataURL to your server or handle it as needed
        console.log('Drawing saved as:', dataURL);
    }
}

// Clear drawing
function clearDrawing() {
    if (canvasInstance) {
        canvasInstance.clear();
    }
}

// Initialize LaTeX preview
function initializeLatexPreview() {
    const latexInput = document.getElementById('latexInput');
    const latexPreview = document.getElementById('latexPreview');
    
    let updateTimeout;
    latexInput?.addEventListener('input', function() {
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
            latexPreview.innerHTML = this.value;
            if (window.MathJax) {
                window.MathJax.typeset([latexPreview]);
            }
        }, 300);
    });
}

// Toggle response history
function togglePreviousResponses() {
    const previousResponses = document.getElementById('previousResponses');
    const toggleBtn = document.getElementById('toggleBtn');
    isExpanded = !isExpanded;
    
    previousResponses.classList.toggle('expanded');
    toggleBtn.textContent = `${isExpanded ? 'Hide' : 'Show'} Previous Responses (${responseHistory.length})`;
}

// Get AI help
async function getAIHelp(helpType) {
    const helpQuery = document.getElementById('helpQuery');
    const currentResponse = document.getElementById('currentResponse');

    // Get current work based on active mode
    const activeMode = document.querySelector('.input-mode-btn.active').dataset.mode;
    let work = '';

    switch (activeMode) {
        case 'text':
            work = document.getElementById('mainWorkArea').value;
            break;
        case 'latex':
            work = document.getElementById('latexInput').value;
            break;
        case 'canvas':
            if (canvasInstance) {
                work = '[Drawing submitted]';
                // You could include the drawing data here if needed:
                // const dataURL = canvasInstance.getImage().toDataURL();
            }
            break;
    }

    // Move current response to history if it exists
    if (currentResponse.innerHTML.trim()) {
        responseHistory.push({
            content: currentResponse.innerHTML,
            type: helpType,
            timestamp: new Date().toLocaleTimeString()
        });

        updateResponseHistory();
    }

    // Show loading state
    currentResponse.innerHTML = 'Getting help...';

    try {
        const response = await fetch('/api/help', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                helpType,
                problem: {{{json problem}}},
                work: work,
                query: helpQuery.value,
                hintHistory: helpType === 'hint' 
                    ? responseHistory.filter(r => r.type === 'hint')
                        .map(r => ({ content: r.content }))
                    : []
            })
        });

        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        currentResponse.innerHTML = data.response;

        if (window.MathJax) {
            window.MathJax.typeset([currentResponse]);
        }
    } catch (error) {
        console.error('Error:', error);
        currentResponse.innerHTML = 'Sorry, there was an error getting help.';
    }
}

// Update response history display
function updateResponseHistory() {
    const previousResponses = document.getElementById('previousResponses');
    previousResponses.innerHTML = responseHistory.map(response => `
        <div class="response-entry">
            <div class="response-type">${response.type} - ${response.timestamp}</div>
            <div class="response-content">${response.content}</div>
        </div>
    `).join('');

    document.getElementById('toggleBtn').textContent = 
        `${isExpanded ? 'Hide' : 'Show'} Previous Responses (${responseHistory.length})`;

    if (window.MathJax) {
        window.MathJax.typeset([previousResponses]);
    }
}

// Handle window resize
window.addEventListener('resize', () => {
    if (canvasInstance) {
        // Update canvas size if needed
        const container = document.getElementById('drawing-area');
        if (container) {
            const width = container.offsetWidth;
            canvasInstance.setImageSize(width, 500);
        }
    }
});
</script>