{{!-- problem.hbs --}}
<div class="problem-container">
    <div class="problem-header">
        <h2>{{problem.type}} - Level {{problem.level}}</h2>
        <a href="/topics/{{topicName}}" class="back-link">‚Üê Back to {{topicName}}</a>
    </div>

    <div class="problem-content">
        <!-- Problem Statement -->
        <div class="problem-statement latex-content">
            <div class="statement-header">Problem:</div>
            {{{problem.problem}}}
        </div>

        <div class="workspace">
            <!-- Input Type Selector -->
            <div class="input-type-selector">
                <button class="input-mode-btn active" data-mode="text">Plain Text</button>
                <button class="input-mode-btn" data-mode="latex">LaTeX</button>
                <button class="input-mode-btn" data-mode="canvas">Drawing</button>
            </div>

            <!-- Input Areas -->
            <div class="work-section">
                <div class="section-header">Your Solution:</div>
                
                <!-- Text Mode -->
                <div id="textWorkArea" class="work-area-container">
                    <textarea id="mainWorkArea" class="main-work-area" 
                        placeholder="Write your solution steps here..."></textarea>
                </div>
                
                <!-- LaTeX Mode -->
                <div id="latexWorkArea" class="work-area-container hidden">
                    <textarea id="latexInput" class="main-work-area" 
                        placeholder="Write your LaTeX solution here..."></textarea>
                    <div id="latexPreview" class="latex-preview"></div>
                </div>
                
                <!-- Drawing Mode -->
                <div id="canvasWorkArea" class="work-area-container hidden">
                    <div class="canvas-toolbar">
                        <button class="tool-btn active" data-tool="pen">
                            <span>‚úèÔ∏è</span> Pen
                        </button>
                        <button class="tool-btn" data-tool="eraser">
                            <span>üßπ</span> Eraser
                        </button>
                        <div class="color-tools">
                            <input type="color" id="colorPicker" value="#000000" title="Color">
                            <div id="commonColors">
                                <button class="color-btn" data-color="#000000" style="background: #000000;"></button>
                                <button class="color-btn" data-color="#ff0000" style="background: #ff0000;"></button>
                                <button class="color-btn" data-color="#0000ff" style="background: #0000ff;"></button>
                            </div>
                        </div>
                        <div class="brush-size">
                            <input type="range" id="brushSize" min="1" max="50" value="2">
                            <span id="brushSizeLabel">2px</span>
                        </div>
                        <button class="tool-btn" id="undoBtn">
                            <span>‚Ü©Ô∏è</span> Undo
                        </button>
                        <button class="tool-btn" id="redoBtn">
                            <span>‚Ü™Ô∏è</span> Redo
                        </button>
                        <button class="tool-btn" id="clearCanvas">
                            <span>üóëÔ∏è</span> Clear
                        </button>
                    </div>
                    <canvas id="drawing-canvas"></canvas>
                </div>
            </div>

            <!-- Help Section -->
            <div class="help-section">
                <div class="section-header">Need Help?</div>
                <textarea id="helpQuery" class="help-query" 
                    placeholder="Ask a specific question or describe where you're stuck..."></textarea>
                
                <div class="help-buttons">
                    <button onclick="getAIHelp('hint')" class="help-btn">üí° Get Hint</button>
                    <button onclick="getAIHelp('nextStep')" class="help-btn">‚û°Ô∏è Next Step</button>
                    <button onclick="getAIHelp('validate')" class="help-btn">‚úÖ Check Work</button>
                    <button onclick="getAIHelp('improve')" class="help-btn">üìù Improve</button>
                </div>

                <div class="response-history">
                    <button onclick="togglePreviousResponses()" class="toggle-btn" id="toggleBtn">
                        Show Previous Responses (0)
                    </button>
                    <div id="previousResponses" class="previous-responses"></div>
                </div>

                <div id="currentResponse" class="current-response"></div>
            </div>
        </div>
    </div>
</div>

<style>
/* Base Styles */
.problem-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background: #1a1a1a;
    color: #e0e0e0;
}

.problem-header h2 {
    margin-bottom: 0.5rem;
}

.back-link {
    color: #4f46e5;
    text-decoration: none;
}

/* Problem Statement */
.problem-statement {
    background: #2d2d2d;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
    border: 1px solid #404040;
}

.statement-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #6366f1;
}

/* Workspace */
.workspace {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.section-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #6366f1;
}

/* Input Type Selector */
.input-type-selector {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.input-mode-btn {
    padding: 0.5rem 1rem;
    background: #2d2d2d;
    border: 1px solid #404040;
    color: #e0e0e0;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background 0.2s;
}

.input-mode-btn:hover {
    background: #383838;
}

.input-mode-btn.active {
    background: #4f46e5;
    border-color: #6366f1;
}

/* Work Areas */
.work-section, .help-section {
    background: #2d2d2d;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #404040;
}

.work-area-container {
    width: 100%;
}

.work-area-container.hidden {
    display: none;
}

.main-work-area, .help-query {
    width: 100%;
    min-height: 120px;
    padding: 15px;
    border: 1px solid #404040;
    border-radius: 8px;
    background: #383838;
    color: #e0e0e0;
    font-family: monospace;
    resize: vertical;
    margin-bottom: 15px;
}

/* Canvas Specific Styles */
.canvas-toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 10px;
    padding: 10px;
    background: #2d2d2d;
    border-radius: 8px;
    align-items: center;
}

.tool-btn {
    padding: 8px 12px;
    background: #383838;
    border: 1px solid #404040;
    color: #e0e0e0;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    min-width: 40px;
    justify-content: center;
}

.tool-btn.active {
    background: #4f46e5;
    border-color: #6366f1;
}

.color-tools {
    display: flex;
    align-items: center;
    gap: 5px;
}

#commonColors {
    display: flex;
    gap: 5px;
}

.color-btn {
    width: 24px;
    height: 24px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.brush-size {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px 10px;
    background: #383838;
    border-radius: 4px;
    min-width: 150px;
}

#colorPicker {
    width: 40px;
    height: 40px;
    padding: 0;
    border: none;
    border-radius: 4px;
}

#drawing-canvas {
    width: 100%;
    height: 500px;
    border-radius: 8px;
    border: 1px solid #404040;
    touch-action: none;
}

/* LaTeX Preview */
.latex-preview {
    margin-top: 1rem;
    padding: 1rem;
    background: #2d2d2d;
    border-radius: 0.25rem;
    min-height: 100px;
    border: 1px solid #404040;
}

/* Help Section */
.help-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
    margin-bottom: 20px;
}

.help-btn {
    padding: 12px;
    border: none;
    border-radius: 8px;
    background: #4f46e5;
    color: white;
    cursor: pointer;
    transition: background 0.3s;
    font-size: 14px;
}

.help-btn:hover {
    background: #6366f1;
}

/* Response History */
.toggle-btn {
    width: 100%;
    padding: 8px 16px;
    background: #383838;
    border: 1px solid #4f46e5;
    color: #e0e0e0;
    border-radius: 4px;
    cursor: pointer;
    text-align: left;
    margin-bottom: 10px;
}

.previous-responses {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
}

.previous-responses.expanded {
    max-height: 500px;
    overflow-y: auto;
}

.response-entry {
    padding: 15px;
    margin: 10px 0;
    background: #383838;
    border-left: 4px solid #4f46e5;
    border-radius: 4px;
}

.response-type {
    float: right;
    font-size: 0.8em;
    color: #888;
}

.current-response {
    padding: 15px;
    margin-top: 15px;
    background: #383838;
    border-left: 4px solid #4f46e5;
    border-radius: 4px;
}
</style>

<script>
let responseHistory = [];
let isExpanded = false;
let currentProblemId = '{{topicName}}/{{problemId}}';
let canvas;
let canvasHistory = [];
let historyPosition = 0;

document.addEventListener('DOMContentLoaded', function() {
    clearHistory();
    initializeInputModes();
    initializeLatexPreview();
});

function clearHistory() {
    responseHistory = [];
    document.getElementById('previousResponses').innerHTML = '';
    document.getElementById('currentResponse').innerHTML = '';
    document.getElementById('toggleBtn').textContent = 'Show Previous Responses (0)';
}

function initializeInputModes() {
    const modeButtons = document.querySelectorAll('.input-mode-btn');
    const workAreas = {
        text: document.getElementById('textWorkArea'),
        latex: document.getElementById('latexWorkArea'),
        canvas: document.getElementById('canvasWorkArea')
    };
    
    modeButtons.forEach(btn => {
        btn.addEventListener('click', async () => {
            const mode = btn.dataset.mode;
            
            modeButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            Object.values(workAreas).forEach(area => area.classList.add('hidden'));
            workAreas[mode].classList.remove('hidden');
            
            if (mode === 'canvas' && !canvas) {
                await initializeCanvas();
            }
        });
    });
}

async function initializeCanvas() {
    const canvasEl = document.getElementById('drawing-canvas');
    if (!canvasEl || canvas) return;

    console.log('Initializing canvas...'); // Debug log

    const container = canvasEl.parentElement;
    canvasEl.width = container.offsetWidth;
    canvasEl.height = 500;

try {
        // Wait for fabric to be available
        if (!window.fabric) {
            console.log('Waiting for Fabric.js to load...'); // Debug log
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        if (!window.fabric) {
            throw new Error('Fabric.js failed to load');
        }

        canvas = new window.fabric.Canvas('drawing-canvas', {
            isDrawingMode: true,
            width: container.offsetWidth,
            height: 500,
            backgroundColor: 'white'
        });

        console.log('Canvas initialized successfully'); // Debug log

        // Initialize default brush
        canvas.freeDrawingBrush = new window.fabric.PencilBrush(canvas);
        canvas.freeDrawingBrush.width = parseInt(document.getElementById('brushSize').value) || 2;
        canvas.freeDrawingBrush.color = document.getElementById('colorPicker').value || '#000000';

        // Add event listeners for tools
        document.querySelectorAll('.tool-btn[data-tool]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tool = e.currentTarget.dataset.tool;
                setTool(tool);
                
                document.querySelectorAll('.tool-btn[data-tool]').forEach(b => b.classList.remove('active'));
                e.currentTarget.classList.add('active');
            });
        });

        // Color picker and common colors
        document.getElementById('colorPicker').addEventListener('input', (e) => {
            if (getCurrentTool() === 'pen') {
                canvas.freeDrawingBrush.color = e.target.value;
            }
        });

        document.querySelectorAll('.color-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const color = e.target.dataset.color;
                if (getCurrentTool() === 'pen') {
                    canvas.freeDrawingBrush.color = color;
                    document.getElementById('colorPicker').value = color;
                }
            });
        });

        // Brush size
        document.getElementById('brushSize').addEventListener('input', (e) => {
            const size = parseInt(e.target.value);
            canvas.freeDrawingBrush.width = size;
            document.getElementById('brushSizeLabel').textContent = `${size}px`;
        });

        // Canvas events for history
        canvas.on('object:added', () => {
            updateCanvasHistory();
        });

        // Undo/Redo buttons
        document.getElementById('undoBtn').addEventListener('click', undo);
        document.getElementById('redoBtn').addEventListener('click', redo);

        // Clear canvas
        document.getElementById('clearCanvas').addEventListener('click', () => {
            canvas.clear();
            canvas.backgroundColor = 'white';
            canvas.renderAll();
            updateCanvasHistory();
        });

        // Save initial state
        updateCanvasHistory();

    } catch (error) {
        console.error('Error initializing canvas:', error);
    }
}

function getCurrentTool() {
    const activeToolBtn = document.querySelector('.tool-btn[data-tool].active');
    return activeToolBtn ? activeToolBtn.dataset.tool : 'pen';
}
function setTool(tool) {
    if (!canvas || !window.fabric) {
        console.warn('Canvas or Fabric.js not initialized yet');
        return;
    }
    
    try {
        if (tool === 'pen') {
            canvas.isDrawingMode = true;
            canvas.freeDrawingBrush = new window.fabric.PencilBrush(canvas);
            canvas.freeDrawingBrush.color = document.getElementById('colorPicker').value;
        } else if (tool === 'eraser') {
            canvas.isDrawingMode = true;
            canvas.freeDrawingBrush = new window.fabric.PencilBrush(canvas);
            canvas.freeDrawingBrush.color = '#FFFFFF';
        }
        
        canvas.freeDrawingBrush.width = parseInt(document.getElementById('brushSize').value);
    } catch (error) {
        console.error('Error setting tool:', error);
    }
}

function updateCanvasHistory() {
    // Remove any states after current position if we're in the middle of history
    canvasHistory = canvasHistory.slice(0, historyPosition + 1);
    // Add current state to history
    canvasHistory.push(JSON.stringify(canvas));
    // Move position to latest state
    historyPosition = canvasHistory.length - 1;
    updateUndoRedoButtons();
}

function undo() {
    if (historyPosition > 0) {
        historyPosition--;
        loadCanvasState(canvasHistory[historyPosition]);
        updateUndoRedoButtons();
    }
}

function redo() {
    if (historyPosition < canvasHistory.length - 1) {
        historyPosition++;
        loadCanvasState(canvasHistory[historyPosition]);
        updateUndoRedoButtons();
    }
}

function loadCanvasState(state) {
    canvas.clear();
    canvas.loadFromJSON(state, () => {
        canvas.renderAll();
        canvas.backgroundColor = 'white';
    });
}

function updateUndoRedoButtons() {
    const undoBtn = document.getElementById('undoBtn');
    const redoBtn = document.getElementById('redoBtn');
    
    undoBtn.disabled = historyPosition <= 0;
    redoBtn.disabled = historyPosition >= canvasHistory.length - 1;
    
    undoBtn.style.opacity = undoBtn.disabled ? '0.5' : '1';
    redoBtn.style.opacity = redoBtn.disabled ? '0.5' : '1';
}

// Initialize LaTeX preview
function initializeLatexPreview() {
    const latexInput = document.getElementById('latexInput');
    const latexPreview = document.getElementById('latexPreview');
    
    let updateTimeout;
    latexInput?.addEventListener('input', function() {
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
            latexPreview.innerHTML = this.value;
            if (window.MathJax) {
                window.MathJax.typeset([latexPreview]);
            }
        }, 300);
    });
}

// Toggle response history
function togglePreviousResponses() {
    const previousResponses = document.getElementById('previousResponses');
    const toggleBtn = document.getElementById('toggleBtn');
    isExpanded = !isExpanded;
    
    previousResponses.classList.toggle('expanded');
    toggleBtn.textContent = `${isExpanded ? 'Hide' : 'Show'} Previous Responses (${responseHistory.length})`;
}

// Get AI help
async function getAIHelp(helpType) {
    const helpQuery = document.getElementById('helpQuery');
    const currentResponse = document.getElementById('currentResponse');

    // Get current work based on active mode
    const activeMode = document.querySelector('.input-mode-btn.active').dataset.mode;
    let work = '';

    switch (activeMode) {
        case 'text':
            work = document.getElementById('mainWorkArea').value;
            break;
        case 'latex':
            work = document.getElementById('latexInput').value;
            break;
        case 'canvas':
            if (canvas) {
                // For now just indicate canvas work
                work = '[Drawing submitted]';
                // Later: Add drawing export functionality
                // work = canvas.toDataURL();
            }
            break;
    }

    if (currentResponse.innerHTML.trim()) {
        responseHistory.push({
            content: currentResponse.innerHTML,
            type: helpType,
            timestamp: new Date().toLocaleTimeString()
        });
        updateResponseHistory();
    }

    currentResponse.innerHTML = 'Getting help...';

    try {
        const response = await fetch('/api/help', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                helpType,
                problem: {{{json problem}}},
                work: work,
                query: helpQuery.value,
                hintHistory: helpType === 'hint' 
                    ? responseHistory.filter(r => r.type === 'hint')
                        .map(r => ({ content: r.content }))
                    : []
            })
        });

        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        currentResponse.innerHTML = data.response;

        if (window.MathJax) {
            window.MathJax.typeset([currentResponse]);
        }
    } catch (error) {
        console.error('Error:', error);
        currentResponse.innerHTML = 'Sorry, there was an error getting help.';
    }
}

// Update response history display
function updateResponseHistory() {
    const previousResponses = document.getElementById('previousResponses');
    previousResponses.innerHTML = responseHistory.map(response => `
        <div class="response-entry">
            <div class="response-type">${response.type} - ${response.timestamp}</div>
            <div class="response-content">${response.content}</div>
        </div>
    `).join('');

    document.getElementById('toggleBtn').textContent = 
        `${isExpanded ? 'Hide' : 'Show'} Previous Responses (${responseHistory.length})`;

    if (window.MathJax) {
        window.MathJax.typeset([previousResponses]);
    }
}

// Handle window resize
window.addEventListener('resize', () => {
    if (canvas) {
        const container = document.getElementById('drawing-canvas').parentElement;
        canvas.setDimensions({
            width: container.offsetWidth,
            height: 500
        });
    }
});
</script>