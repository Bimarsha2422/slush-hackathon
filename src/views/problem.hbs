<div class="problem-container">
  <div class="problem-header">
    
    {{#if isAssignmentQuestion}}
    <a href="/student/assignment/{{assignmentContext.assignmentId}}" class="text-orange-500 hover:text-orange-400">
        ‚Üê Back to Assignment
    </a>
{{else}}
    <h2>{{problem.type}} - Level {{problem.level}}</h2>
    <a href="/topics/{{topicName}}" class="back-link">‚Üê Back to {{topicName}}</a>
{{/if}}
  </div>

  <div class="problem-content">
    <!-- Problem Statement -->
    <div class="problem-statement latex-content">
      <div class="statement-header">Problem:</div>
      {{{problem.problem}}}
    </div>

    <div class="workspace">
      <!-- Input Type Selector -->
      <div class="input-type-selector">
        <button class="input-mode-btn active" data-mode="text">Plain Text</button>
        <button class="input-mode-btn" data-mode="latex">LaTeX</button>
        <button class="input-mode-btn" data-mode="canvas">Drawing</button>
      </div>

      <!-- Input Areas -->
      <div class="work-section">
    <div class="flex justify-between items-center mb-4">
        <div class="section-header">Your Solution:</div>
        {{#if isAssignmentQuestion}}
        <div id="statusBadge" 
             class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                    {{#if (eq assignmentContext.status 'completed')}}
                        bg-green-100 text-green-800
                    {{else if (eq assignmentContext.status 'in_progress')}}
                        bg-blue-100 text-blue-800
                    {{else}}
                        bg-gray-100 text-gray-800
                    {{/if}}">
            {{assignmentContext.status}}
        </div>
        {{/if}}
    </div>
    
    <!-- Input Areas -->
    <div id="textWorkArea" class="work-area-container">
        <textarea id="mainWorkArea" class="main-work-area" 
                  placeholder="Write your solution steps here..."></textarea>
    </div>
    
    <div id="latexWorkArea" class="work-area-container hidden">
        <textarea id="latexInput" class="main-work-area" 
                  placeholder="Write your LaTeX solution here..."></textarea>
        <div id="latexPreview" class="latex-preview"></div>
    </div>
    
    <!-- Drawing Mode -->
<div id="canvasWorkArea" class="work-area-container hidden">
    <div class="canvas-toolbar">
        <button class="tool-btn active" data-tool="pen" data-tooltip="Pen">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                 stroke-linecap="round" stroke-linejoin="round">
                <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
            </svg>
        </button>
        <button class="tool-btn" data-tool="eraser" data-tooltip="Eraser">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                 stroke-linecap="round" stroke-linejoin="round">
                <path d="m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21"/>
                <path d="M22 21H7"/>
            </svg>
        </button>
        <div class="color-tools">
            <input type="color" id="colorPicker" value="#000000" title="Color">
            <div id="commonColors">
                <button class="color-btn" data-color="#000000" style="background: #000000;" data-tooltip="Black"></button>
                <button class="color-btn" data-color="#ff0000" style="background: #ff0000;" data-tooltip="Red"></button>
                <button class="color-btn" data-color="#0000ff" style="background: #0000ff;" data-tooltip="Blue"></button>
            </div>
        </div>
        <div class="brush-size">
            <input type="range" id="brushSize" min="1" max="50" value="2" title="Brush Size">
            <span id="brushSizeLabel">2px</span>
        </div>
        <button class="tool-btn" id="undoBtn" data-tooltip="Undo">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                 stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 7v6h6"/>
                <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"/>
            </svg>
        </button>
        <button class="tool-btn" id="clearCanvas" data-tooltip="Clear All">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                 stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 6h18"/>
                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
            </svg>
        </button>
    </div>
    <canvas id="drawing-canvas"></canvas>
</div>

    <!-- Action Buttons -->
    <div class="flex justify-between items-center mt-4">
        <div class="flex gap-4">
          {{#if isAssignmentQuestion}}
<button onclick="saveProgress()" 
        class="p-2 rounded-full bg-blue-600 hover:bg-blue-700 text-white shadow-sm transition-colors"
        title="Save Progress">
    <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
              d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
    </svg>
</button>

<button onclick="markComplete()" 
        class="p-2 rounded-full bg-orange-600 hover:bg-orange-700 text-white shadow-sm transition-colors"
        title="Mark as Complete">
    <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
    </svg>
</button>
{{/if}}
        </div>
    </div>

    <!-- Save Status -->
    <div id="saveStatus" class="mt-2 text-sm hidden">
        <span class="save-success text-green-600 hidden">
            <svg class="inline h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            Progress saved successfully
        </span>
        <span class="save-error text-red-600 hidden">
            <svg class="inline h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
            </svg>
            Failed to save progress
        </span>
    </div>
</div>

{{#if feedback}}
    <div id="feedbackSection" class="mt-8 border border-orange-200 rounded-lg overflow-hidden">
        <button onclick="toggleFeedback()" class="w-full flex items-center justify-between p-4 bg-orange-50 hover:bg-orange-100">
            <span class="text-lg font-medium text-gray-900">AI Feedback on Your Solution</span>
            <svg id="feedbackArrow" class="w-6 h-6 transform transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
        </button>
        <div id="feedbackContent" class="hidden bg-white p-6">
            <div class="space-y-6">
                <div>
                    <h4 class="text-sm font-medium text-green-600 mb-2">Strengths</h4>
                    <ul class="list-disc pl-5 space-y-1">
                        {{#each feedback.strengths}}
                        <li class="text-sm text-gray-600">{{this}}</li>
                        {{/each}}
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-sm font-medium text-orange-600 mb-2">Areas for Improvement</h4>
                    <ul class="list-disc pl-5 space-y-1">
                        {{#each feedback.improvements}}
                        <li class="text-sm text-gray-600">{{this}}</li>
                        {{/each}}
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-sm font-medium text-gray-900 mb-2">Overall Analysis</h4>
                    <p class="text-sm text-gray-600">{{feedback.aiAnalysis}}</p>
                </div>

                <div class="pt-4 mt-4 border-t border-gray-200">
                    <div class="text-sm text-gray-500">
                        Submitted: {{formatDate feedback.submissionTime}}
                        {{#if feedback.hintsUsed}}
                        ‚Ä¢ Used {{feedback.hintsUsed}} hint{{#if (not (eq feedback.hintsUsed 1))}}s{{/if}}
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
    </div>
    {{/if}}

      <!-- Help Section -->
      <div class="help-section">
        <div class="section-header">Need Help?</div>
        <textarea id="helpQuery" class="help-query" 
                  placeholder="Ask a specific question or describe where you're stuck..."></textarea>
        
        <div class="help-buttons">
          <button onclick="getAIHelp('hint')" class="help-btn">üí° Get Hint</button>
          <button onclick="getAIHelp('nextStep')" class="help-btn">‚û°Ô∏è Next Step</button>
          <button onclick="getAIHelp('validate')" class="help-btn">‚úÖ Check Work</button>
          <button onclick="getAIHelp('improve')" class="help-btn">üìù Improve</button>
        </div>

        <div class="response-history">
          <button onclick="togglePreviousResponses()" class="toggle-btn" id="toggleBtn">
            Show Previous Responses (0)
          </button>
          <div id="previousResponses" class="previous-responses"></div>
        </div>

        <div id="currentResponse" class="current-response"></div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Base Styles */

  .feedback-animation {
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from {
        transform: translateY(-20px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

  .problem-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background: #ffffff;
    color: #333333;
  }

  .problem-header h2 {
    margin-bottom: 0.5rem;
  }

  .back-link {
    color: #ff6600;
    text-decoration: none;
  }

  /* Problem Statement */
  .problem-statement {
    background: #f9fafb;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
    border: 1px solid #e5e7eb;
  }

  .statement-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ff6600;
  }

  /* Workspace */
  .workspace {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .section-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ff6600;
  }

  /* Input Type Selector */
  .input-type-selector {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .input-mode-btn {
    padding: 0.5rem 1rem;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    color: #333333;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background 0.2s;
  }

  .input-mode-btn:hover {
    background: #e5e7eb;
  }

  .input-mode-btn.active {
    background: #ff6600;
    border-color: #ff6600;
    color: white;
  }

  /* Work Areas */
  .work-section, .help-section {
    background: #f9fafb;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
    color: #333333;
  }

  .work-area-container {
    width: 100%;
  }

  .work-area-container.hidden {
    display: none;
  }

  .main-work-area, .help-query {
    width: 100%;
    min-height: 120px;
    padding: 15px;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    background: #ffffff;
    color: #333333;
    font-family: monospace;
    resize: vertical;
    margin-bottom: 15px;
  }

  /* Canvas Specific Styles */
  .canvas-toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 10px;
    padding: 10px;
    background: #f9fafb;
    border-radius: 8px;
    align-items: center;
  }

  .tool-btn {
    padding: 8px 12px;
    background: #f3f4f6;
    border: 1px solid #e5e7eb;
    color: #333333;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    min-width: 40px;
    justify-content: center;
  }

  .tool-btn.active {
    background: #ff6600;
    border-color: #ff6600;
    color: white;
  }

  .color-tools {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  #commonColors {
    display: flex;
    gap: 5px;
  }

  .color-btn {
    width: 24px;
    height: 24px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .brush-size {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px 10px;
    background: #f3f4f6;
    border-radius: 4px;
    min-width: 150px;
  }

  #colorPicker {
    width: 40px;
    height: 40px;
    padding: 0;
    border: none;
    border-radius: 4px;
  }

  #drawing-canvas {
    width: 100%;
    height: 500px;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
    touch-action: none;
  }

  /* LaTeX Preview */
  .latex-preview {
    margin-top: 1rem;
    padding: 1rem;
    background: #f9fafb;
    border-radius: 0.25rem;
    min-height: 100px;
    border: 1px solid #e5e7eb;
  }

  /* Help Section */
  .help-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
    margin-bottom: 20px;
  }

  .help-btn {
    padding: 12px;
    border: none;
    border-radius: 8px;
    background: #ff6600;
    color: white;
    cursor: pointer;
    transition: background 0.3s;
    font-size: 14px;
  }

  .help-btn:hover {
    background: #ff7f00;
  }

  /* Response History */
  .toggle-btn {
    width: 100%;
    padding: 8px 16px;
    background: #f3f4f6;
    border: 1px solid #ff6600;
    color: #333333;
    border-radius: 4px;
    cursor: pointer;
    text-align: left;
    margin-bottom: 10px;
  }

  .previous-responses {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  .previous-responses.expanded {
    max-height: 500px;
    overflow-y: auto;
  }

  .response-entry {
    padding: 15px;
    margin: 10px 0;
    background: #f3f4f6;
    border-left: 4px solid #ff6600;
    border-radius: 4px;
  }

  .response-type {
    float: right;
    font-size: 0.8em;
    color: #888;
  }

  .current-response {
    padding: 15px;
    margin-top: 15px;
    background: #f3f4f6;
    border-left: 4px solid #ff6600;
    border-radius: 4px;
  }
</style>

<script>

    // Initialize saved work data
    window.savedWork = {{{json savedWork}}};
    window.savedMode = {{{json workMode}}};
    window.assignmentContext = {{{json assignmentContext}}};

  // (JavaScript remains unchanged except for potential console logs and error handling.)
  let responseHistory = [];
  let isExpanded = false;
  let currentProblemId = '{{topicName}}/{{problemId}}';
  let canvas;
  let canvasHistory = [];
  let historyPosition = 0;

  document.addEventListener('DOMContentLoaded', function() {
    clearHistory();
    initializeInputModes();
    initializeLatexPreview();
  });

  function clearHistory() {
    responseHistory = [];
    document.getElementById('previousResponses').innerHTML = '';
    document.getElementById('currentResponse').innerHTML = '';
    document.getElementById('toggleBtn').textContent = 'Show Previous Responses (0)';
  }

  function initializeInputModes() {
    const modeButtons = document.querySelectorAll('.input-mode-btn');
    const workAreas = {
      text: document.getElementById('textWorkArea'),
      latex: document.getElementById('latexWorkArea'),
      canvas: document.getElementById('canvasWorkArea')
    };

    modeButtons.forEach(btn => {
      btn.addEventListener('click', async () => {
        const mode = btn.dataset.mode;

        modeButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        Object.values(workAreas).forEach(area => area.classList.add('hidden'));
        workAreas[mode].classList.remove('hidden');

        if (mode === 'canvas' && !canvas) {
          await initializeCanvas();
        }
      });
    });
  }

  async function initializeCanvas() {
    const canvasEl = document.getElementById('drawing-canvas');
    if (!canvasEl || canvas) return;

    console.log('Initializing canvas...');
    const container = canvasEl.parentElement;
    canvasEl.width = container.offsetWidth;
    canvasEl.height = 500;

    try {
      if (!window.fabric) {
        console.log('Waiting for Fabric.js to load...');
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      if (!window.fabric) {
        throw new Error('Fabric.js failed to load');
      }

      canvas = new window.fabric.Canvas('drawing-canvas', {
        isDrawingMode: true,
        width: container.offsetWidth,
        height: 500,
        backgroundColor: 'white'
      });

      console.log('Canvas initialized successfully');

      canvas.freeDrawingBrush = new window.fabric.PencilBrush(canvas);
      canvas.freeDrawingBrush.width = parseInt(document.getElementById('brushSize').value) || 2;
      canvas.freeDrawingBrush.color = document.getElementById('colorPicker').value || '#000000';

      document.querySelectorAll('.tool-btn[data-tool]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const tool = e.currentTarget.dataset.tool;
          setTool(tool);
          document.querySelectorAll('.tool-btn[data-tool]').forEach(b => b.classList.remove('active'));
          e.currentTarget.classList.add('active');
        });
      });

      document.getElementById('colorPicker').addEventListener('input', (e) => {
        if (getCurrentTool() === 'pen') {
          canvas.freeDrawingBrush.color = e.target.value;
        }
      });

      document.querySelectorAll('.color-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const color = e.target.dataset.color;
          if (getCurrentTool() === 'pen') {
            canvas.freeDrawingBrush.color = color;
            document.getElementById('colorPicker').value = color;
          }
        });
      });

      document.getElementById('brushSize').addEventListener('input', (e) => {
        const size = parseInt(e.target.value);
        canvas.freeDrawingBrush.width = size;
        document.getElementById('brushSizeLabel').textContent = `${size}px`;
      });

      canvas.on('object:added', () => {
        updateCanvasHistory();
      });

      document.getElementById('undoBtn').addEventListener('click', undo);

      document.getElementById('clearCanvas').addEventListener('click', () => {
        canvas.clear();
        canvas.backgroundColor = 'white';
        canvas.renderAll();
        updateCanvasHistory();
      });

      updateCanvasHistory();
    } catch (error) {
      console.error('Error initializing canvas:', error);
    }
  }

  function getCurrentTool() {
    const activeToolBtn = document.querySelector('.tool-btn[data-tool].active');
    return activeToolBtn ? activeToolBtn.dataset.tool : 'pen';
  }

function setTool(tool) {
    if (!canvas || !window.fabric) {
        console.warn('Canvas or Fabric.js not initialized yet');
        return;
    }
    
    try {
        canvas.isDrawingMode = true;
        canvas.freeDrawingBrush = new window.fabric.PencilBrush(canvas);
        
        if (tool === 'pen') {
            canvas.freeDrawingBrush.color = document.getElementById('colorPicker').value;
            canvas.freeDrawingBrush.width = parseInt(document.getElementById('brushSize').value);
            canvas.isDrawingMode = true;
        } else if (tool === 'eraser') {
            canvas.freeDrawingBrush.color = canvas.backgroundColor;
            canvas.freeDrawingBrush.width = parseInt(document.getElementById('brushSize').value) * 2; // Make eraser slightly bigger
            canvas.isDrawingMode = true;
        }
        
        // Force a brush update
        canvas.freeDrawingBrush.color = tool === 'pen' ? 
            document.getElementById('colorPicker').value : 
            canvas.backgroundColor;
    } catch (error) {
        console.error('Error setting tool:', error);
    }
}

  function updateCanvasHistory() {
    canvasHistory = canvasHistory.slice(0, historyPosition + 1);
    canvasHistory.push(JSON.stringify(canvas));
    historyPosition = canvasHistory.length - 1;
  }

  function undo() {
    if (historyPosition > 0) {
      historyPosition--;
      loadCanvasState(canvasHistory[historyPosition]);
    }
  }


  function loadCanvasState(state) {
    canvas.clear();
    canvas.loadFromJSON(state, () => {
      canvas.renderAll();
      canvas.backgroundColor = 'white';
    });
  }


  function initializeLatexPreview() {
    const latexInput = document.getElementById('latexInput');
    const latexPreview = document.getElementById('latexPreview');
    let updateTimeout;
    latexInput?.addEventListener('input', function() {
      clearTimeout(updateTimeout);
      updateTimeout = setTimeout(() => {
        latexPreview.innerHTML = this.value;
        if (window.MathJax) {
          window.MathJax.typeset([latexPreview]);
        }
      }, 300);
    });
  }

  function togglePreviousResponses() {
    const previousResponses = document.getElementById('previousResponses');
    const toggleBtn = document.getElementById('toggleBtn');
    isExpanded = !isExpanded;
    previousResponses.classList.toggle('expanded');
    toggleBtn.textContent = `${isExpanded ? 'Hide' : 'Show'} Previous Responses (${responseHistory.length})`;
  }

  async function getAIHelp(helpType) {
    const helpQuery = document.getElementById('helpQuery');
    const currentResponse = document.getElementById('currentResponse');
    const activeMode = document.querySelector('.input-mode-btn.active').dataset.mode;
    let work = '';
    let isCanvasMode = false;

    switch (activeMode) {
      case 'text':
        work = document.getElementById('mainWorkArea').value;
        break;
      case 'latex':
        work = document.getElementById('latexInput').value;
        break;
      case 'canvas':
        if (!canvas) {
            throw new Error('Canvas not initialized');
        }
        // Convert canvas to image when in canvas mode
        work = canvas.toDataURL('image/png');
        isCanvasMode = true;
        break;
    }

    if (currentResponse.innerHTML.trim()) {
      responseHistory.push({
        content: currentResponse.innerHTML,
        type: helpType,
        timestamp: new Date().toLocaleTimeString()
      });
      updateResponseHistory();
    }

    currentResponse.innerHTML = 'Getting help...';

    try {
      const response = await fetch('/api/help', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          helpType,
          problem: {{{json problem}}},
          work: work,
          query: helpQuery.value,
          isCanvasMode,
          hintHistory: helpType === 'hint' 
            ? responseHistory.filter(r => r.type === 'hint').map(r => ({ content: r.content }))
            : []
        })
      });

      if (!response.ok) throw new Error('Network response was not ok');

      const data = await response.json();
      currentResponse.innerHTML = data.response;
      if (window.MathJax) {
        window.MathJax.typeset([currentResponse]);
      }
    } catch (error) {
      console.error('Error:', error);
      currentResponse.innerHTML = 'Sorry, there was an error getting help.';
    }
  }

  function updateResponseHistory() {
    const previousResponses = document.getElementById('previousResponses');
    previousResponses.innerHTML = responseHistory.map(response => `
      <div class="response-entry">
        <div class="response-type">${response.type} - ${response.timestamp}</div>
        <div class="response-content">${response.content}</div>
      </div>
    `).join('');

    document.getElementById('toggleBtn').textContent = 
      `${isExpanded ? 'Hide' : 'Show'} Previous Responses (${responseHistory.length})`;

    if (window.MathJax) {
      window.MathJax.typeset([previousResponses]);
    }
  }

  window.addEventListener('resize', () => {
    if (canvas) {
      const container = document.getElementById('drawing-canvas').parentElement;
      canvas.setDimensions({
        width: container.offsetWidth,
        height: 500
      });
    }
  });


async function saveProgress() {
    const activeMode = document.querySelector('.input-mode-btn.active').dataset.mode;
    let work = '';
    
    // Get work based on active mode
    switch (activeMode) {
        case 'text':
            work = document.getElementById('mainWorkArea').value;
            break;
        case 'latex':
            work = document.getElementById('latexInput').value;
            break;
        case 'canvas':
            work = canvas.toDataURL('image/png');
            break;
    }

    if (!work.trim() && activeMode !== 'canvas') {
        showSaveStatus('error', 'No work to save');
        return;
    }

    try {
        const response = await fetch(
            `/student/assignment/${assignmentContext.assignmentId}/question/${assignmentContext.questionId}/save`, 
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    work,
                    mode: activeMode
                })
            }
        );

        if (!response.ok) {
            throw new Error('Failed to save progress');
        }

        const data = await response.json();
        showSaveStatus('success', 'Progress saved successfully');
    } catch (error) {
        console.error('Error saving progress:', error);
        showSaveStatus('error', 'Failed to save progress');
    }
}

function showSaveStatus(type, message) {
    const statusDiv = document.getElementById('saveStatus');
    const successSpan = statusDiv.querySelector('.save-success');
    const errorSpan = statusDiv.querySelector('.save-error');

    statusDiv.classList.remove('hidden');
    
    if (type === 'success') {
        successSpan.classList.remove('hidden');
        errorSpan.classList.add('hidden');
    } else {
        successSpan.classList.add('hidden');
        errorSpan.classList.remove('hidden');
    }

    // Hide the status after 3 seconds
    setTimeout(() => {
        statusDiv.classList.add('hidden');
    }, 3000);
}

// Add autosave functionality (optional)
let autosaveTimeout;
function setupAutosave() {
    const workAreas = ['mainWorkArea', 'latexInput'];
    workAreas.forEach(areaId => {
        const element = document.getElementById(areaId);
        if (element) {
            element.addEventListener('input', () => {
                clearTimeout(autosaveTimeout);
                autosaveTimeout = setTimeout(() => {
                    saveProgress();
                }, 30000); // Autosave after 30 seconds of inactivity
            });
        }
    });
}

async function markComplete() {
    const activeMode = document.querySelector('.input-mode-btn.active').dataset.mode;
    let work = '';
    
    switch (activeMode) {
        case 'text':
            work = document.getElementById('mainWorkArea').value;
            break;
        case 'latex':
            work = document.getElementById('latexInput').value;
            break;
        case 'canvas':
            work = canvas.toDataURL('image/png');
            break;
    }

    try {
        const response = await fetch(
            `/student/assignment/${assignmentContext.assignmentId}/question/${assignmentContext.questionId}/complete`, 
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    work,
                    mode: activeMode
                })
            }
        );

        if (!response.ok) {
            throw new Error('Failed to mark as complete');
        }

        const data = await response.json();
        
        // Show AI feedback
        showAIFeedback(data.feedback);
        
        // Update status indicator
        updateStatusIndicator('completed');
        
        // If assignment is complete, show completion message
        if (data.isAssignmentComplete) {
            showAssignmentComplete();
        }

    } catch (error) {
        console.error('Error marking complete:', error);
        showError('Failed to mark as complete');
    }
}

function showAIFeedback(feedback) {
    const feedbackSection = document.getElementById('feedbackSection');
    if (feedbackSection) {
        // If section exists, update its content
        feedbackSection.remove();
    }
    
    // Create new feedback section
    const newFeedbackSection = document.createElement('div');
    newFeedbackSection.id = 'feedbackSection';
    newFeedbackSection.className = 'mt-8 border border-orange-200 rounded-lg overflow-hidden feedback-animation';
    newFeedbackSection.innerHTML = `
        <button onclick="toggleFeedback()" class="w-full flex items-center justify-between p-4 bg-orange-50 hover:bg-orange-100">
            <span class="text-lg font-medium text-gray-900">AI Feedback on Your Solution</span>
            <svg id="feedbackArrow" class="w-6 h-6 transform transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
        </button>
        <div id="feedbackContent" class="bg-white p-6">
            <div class="space-y-6">
                <div>
                    <h4 class="text-sm font-medium text-green-600 mb-2">Strengths</h4>
                    <ul class="list-disc pl-5 space-y-1">
                        ${feedback.strengths.map(s => `<li class="text-sm text-gray-600">${s}</li>`).join('')}
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-sm font-medium text-orange-600 mb-2">Areas for Improvement</h4>
                    <ul class="list-disc pl-5 space-y-1">
                        ${feedback.improvements.map(i => `<li class="text-sm text-gray-600">${i}</li>`).join('')}
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-sm font-medium text-gray-900 mb-2">Overall Analysis</h4>
                    <p class="text-sm text-gray-600">${feedback.aiAnalysis}</p>
                </div>
            </div>
        </div>
    `;

    // Insert the feedback section after the save status div
    const saveStatus = document.getElementById('saveStatus');
    saveStatus.parentNode.insertBefore(newFeedbackSection, saveStatus.nextSibling);
}

function updateStatusIndicator(status) {
    const statusSpan = document.querySelector('.status-indicator');
    if (statusSpan) {
        // Remove all status classes
        statusSpan.classList.remove('bg-gray-100', 'bg-blue-100', 'bg-green-100');
        statusSpan.classList.remove('text-gray-800', 'text-blue-800', 'text-green-800');
        
        // Add appropriate classes based on status
        switch (status) {
            case 'completed':
                statusSpan.classList.add('bg-green-100', 'text-green-800');
                statusSpan.textContent = 'Completed';
                break;
            case 'in_progress':
                statusSpan.classList.add('bg-blue-100', 'text-blue-800');
                statusSpan.textContent = 'In Progress';
                break;
            default:
                statusSpan.classList.add('bg-gray-100', 'text-gray-800');
                statusSpan.textContent = 'Not Started';
        }
    }
}

function toggleFeedback() {
    const content = document.getElementById('feedbackContent');
    const arrow = document.getElementById('feedbackArrow');
    
    content.classList.toggle('hidden');
    arrow.classList.toggle('rotate-180');
}

function showAssignmentComplete() {
    // Show completion message and possibly redirect
    const message = document.createElement('div');
    message.className = 'fixed bottom-4 right-4 bg-green-100 text-green-800 p-4 rounded-lg shadow-lg';
    message.innerHTML = `
        <div class="flex items-center">
            <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            Assignment Complete! 
        </div>
    `;
    document.body.appendChild(message);
  
}

document.addEventListener('DOMContentLoaded', function() {
    // Load saved work if available
    if (window.savedWork && window.savedMode) {
        console.log('Loading saved work in mode:', window.savedMode);
        
        // Switch to the saved mode
        const modeButton = document.querySelector(`.input-mode-btn[data-mode="${window.savedMode}"]`);
        if (modeButton) {
            modeButton.click();
        }
        
        // Load the content based on mode
        switch (window.savedMode) {
            case 'text':
                document.getElementById('mainWorkArea').value = window.savedWork;
                break;
                
            case 'latex':
                const latexInput = document.getElementById('latexInput');
                latexInput.value = window.savedWork;
                // Trigger LaTeX preview update
                const event = new Event('input');
                latexInput.dispatchEvent(event);
                break;
                
            case 'canvas':
                if (window.savedWork.startsWith('data:image')) {
                    const loadCanvasImage = () => {
                        if (!window.fabric || !canvas) {
                            setTimeout(loadCanvasImage, 100);
                            return;
                        }
                        
                        fabric.Image.fromURL(window.savedWork, function(img) {
                            canvas.clear();
                            canvas.setBackgroundColor('white', canvas.renderAll.bind(canvas));
                            
                            // Scale image to fit canvas while maintaining aspect ratio
                            const scaleFactor = Math.min(
                                canvas.width / img.width,
                                canvas.height / img.height
                            );
                            
                            img.scale(scaleFactor);
                            
                            // Center the image
                            img.set({
                                left: (canvas.width - img.width * scaleFactor) / 2,
                                top: (canvas.height - img.height * scaleFactor) / 2
                            });
                            
                            canvas.add(img);
                            canvas.renderAll();
                            
                            // Save initial state for undo
                            updateCanvasHistory();
                        });
                    };
                    
                    loadCanvasImage();
                }
                break;
        }
    }
});

// Function to save work
async function saveProgress() {
    const activeMode = document.querySelector('.input-mode-btn.active').dataset.mode;
    let work = '';
    
    try {
        // Get work based on active mode
        switch (activeMode) {
            case 'text':
                work = document.getElementById('mainWorkArea').value;
                if (!work.trim()) {
                    throw new Error('Please enter some work before saving');
                }
                break;
                
            case 'latex':
                work = document.getElementById('latexInput').value;
                if (!work.trim()) {
                    throw new Error('Please enter some LaTeX before saving');
                }
                break;
                
            case 'canvas':
                if (!canvas) {
                    throw new Error('Canvas not initialized');
                }
                // Check if canvas is empty
                const imageData = canvas.getContext().getImageData(
                    0, 0, canvas.width, canvas.height
                ).data;
                const isEmpty = !imageData.some(channel => channel !== 0);
                
                if (isEmpty) {
                    throw new Error('Please draw something before saving');
                }
                work = canvas.toDataURL('image/png');
                break;
                
            default:
                throw new Error('Invalid input mode');
        }

        const response = await fetch(
            `/student/assignment/${assignmentContext.assignmentId}/question/${assignmentContext.questionId}/save`, 
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    work,
                    mode: activeMode
                })
            }
        );

        if (!response.ok) {
            throw new Error('Failed to save progress');
        }

        showSaveStatus('success');
        updateStatus('in_progress');
    } catch (error) {
        console.error('Error saving progress:', error);
        showSaveStatus('error', error.message);
    }
}

function showSaveStatus(type, message) {
    const statusDiv = document.getElementById('saveStatus');
    const successSpan = statusDiv.querySelector('.save-success');
    const errorSpan = statusDiv.querySelector('.save-error');
    
    statusDiv.classList.remove('hidden');
    
    if (type === 'success') {
        successSpan.classList.remove('hidden');
        errorSpan.classList.add('hidden');
    } else {
        errorSpan.textContent = message || 'Failed to save progress';
        successSpan.classList.add('hidden');
        errorSpan.classList.remove('hidden');
    }
    
    // Hide after 3 seconds
    setTimeout(() => {
        statusDiv.classList.add('hidden');
    }, 3000);
}

function updateStatus(status) {
    const statusBadge = document.getElementById('statusBadge');
    if (!statusBadge) return;
    
    // Remove existing classes
    statusBadge.classList.remove(
        'bg-gray-100', 'text-gray-800',
        'bg-blue-100', 'text-blue-800',
        'bg-green-100', 'text-green-800'
    );
    
    // Add new classes based on status
    switch (status) {
        case 'completed':
            statusBadge.classList.add('bg-green-100', 'text-green-800');
            break;
        case 'in_progress':
            statusBadge.classList.add('bg-blue-100', 'text-blue-800');
            break;
        default:
            statusBadge.classList.add('bg-gray-100', 'text-gray-800');
    }
    
    statusBadge.textContent = status.replace(/_/g, ' ');
}

</script>
