<!DOCTYPE html>
<html lang="en" class="dark h-full">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Math Learning Platform</title>
    
    {{!-- Tailwind CSS --}}
    <link rel="stylesheet" href="/css/output.css">
    
    {{!-- Inter Font --}}
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">

    <!-- Replace the old dependencies with these -->
<script src="
https://cdn.jsdelivr.net/npm/literallycanvas@0.5.2/lib/js/literallycanvas-core.min.js
"></script>
<link href="
https://cdn.jsdelivr.net/npm/literallycanvas@0.5.2/lib/css/literallycanvas.min.css
" rel="stylesheet">
<script>
MathJax = {
    loader: {
        load: ['[tex]/ams', '[tex]/noerrors', '[tex]/noundefined']
    },
    tex: {
        packages: {'[+]': ['ams', 'noerrors', 'noundefined']},
        inlineMath: [['$', '$'], ['\\(', '\\)']],
        displayMath: [['$$', '$$'], ['\\[', '\\]']],
        processEscapes: true,
        processEnvironments: true
    },
    options: {
        skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
    }
};
</script>
<script type="text/javascript" id="MathJax-script" async
    src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

    <style>
        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        .animate-float {
            animation: float 6s ease-in-out infinite;
        }

        .typewriter {
            overflow: hidden;
            border-right: 2px solid #4f46e5;
            white-space: nowrap;
            letter-spacing: .15em;
            animation: 
                typing 3.5s steps(40, end),
                blink-caret .75s step-end infinite;
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: #4f46e5; }
        }

        .fade-in {
            opacity: 0;
            animation: fadeIn 1s ease-out forwards;
        }

        @keyframes fadeIn {
            to { opacity: 1; }
        }
    </style>

    {{!-- MathJax Configuration --}}
    <script>
        MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']],
                packages: {'[+]': ['color', 'ams', 'noerrors', 'noundefined']},
                macros: {
                    R: '{\\mathbb{R}}',
                    N: '{\\mathbb{N}}',
                    Z: '{\\mathbb{Z}}',
                    Q: '{\\mathbb{Q}}',
                },
                processEnvironments: true,
                processRefs: true,
                tags: 'ams'
            },
            options: {
                skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
                processHtmlClass: 'tex2jax_process'
            },
            loader: {
                load: ['[tex]/color', '[tex]/ams', '[tex]/noerrors', '[tex]/noundefined']
            }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>

<body class="h-full bg-gray-900">
    {{!-- Animated Navigation --}}
    <nav class="bg-gray-800/50 backdrop-blur-md border-b border-gray-700 fixed w-full z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    {{!-- Animated Logo --}}
                    <a href="/" class="flex items-center text-xl font-bold text-white hover:text-indigo-400 transition-colors group">
                        <svg class="h-6 w-6 mr-2 animate-float" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                  d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                        </svg>
                        <span class="bg-gradient-to-r from-indigo-400 to-purple-400 bg-clip-text text-transparent">
                            Math Learning
                        </span>
                    </a>

                    {{!-- Conditional Return Home --}}
                    {{#unless isHome}}
                    <a href="/" class="ml-8 text-sm font-medium text-gray-300 hover:text-white transition-colors fade-in">
                        ← Return Home
                    </a>
                    {{/unless}}
                </div>
            </div>
        </div>
    </nav>

    {{!-- Main Content with Entrance Animation --}}
    <main class="fade-in pt-24" style="animation-delay: 0.3s">
        {{{body}}}
    </main>

    {{!-- Animated Footer --}}
    <footer class="bg-gray-800/50 backdrop-blur-lg border-t border-gray-700 mt-24">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <p class="text-center text-gray-400 fade-in">
                © 2024 Math Learning Platform • 
                <span class="bg-gradient-to-r from-indigo-400 to-purple-400 bg-clip-text text-transparent">
                    Empowering Mathematical Minds
                </span>
            </p>
        </div>
    </footer>

    {{!-- KaTeX Rendering --}}
    <script>
        function renderMath() {
            renderMathInElement(document.body, {
                delimiters: [
                    {left: "\\[", right: "\\]", display: true},
                    {left: "\\(", right: "\\)", display: false},
                    {left: "$", right: "$", display: false},
                    {left: "$$", right: "$$", display: true}
                ],
                throwOnError: false
            });
        }
        
        // Initialize animations
        document.addEventListener('DOMContentLoaded', () => {
            const animateElements = document.querySelectorAll('.fade-in');
            animateElements.forEach(el => el.style.opacity = '1');
        });
        
    </script>
</body>
</html>