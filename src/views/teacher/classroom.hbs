{{!-- src/views/teacher/classroom.hbs --}}
<div class="min-h-screen bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    {{!-- Classroom Header --}}
    <div class="border-b border-gray-200 pb-8 mb-8">
      <div class="flex justify-between items-start">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">{{classroom.name}}</h1>
          <p class="mt-2 text-sm text-gray-600">{{classroom.description}}</p>
        </div>
        <div class="flex items-center space-x-4">
          {{!-- Join Code Display --}}
          <div class="bg-orange-50 rounded-lg px-4 py-2">
            <p class="text-sm text-gray-600">Join Code:</p>
            <div class="flex items-center space-x-2">
              <span class="text-lg font-mono font-bold text-orange-600">{{classroom.code}}</span>
              <button onclick="window.generateNewCode()" 
                      class="text-orange-600 hover:text-orange-500"
                      title="Generate New Code">
                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                </svg>
              </button>
            </div>
          </div>
          {{!-- Settings Button --}}
          <button onclick="window.showClassroomSettings()" 
                  class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md 
                         shadow-sm text-sm font-medium text-gray-700 bg-white 
                         hover:bg-gray-50 focus:outline-none focus:ring-2 
                         focus:ring-offset-2 focus:ring-orange-500">
            <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
            Settings
          </button>
        </div>
      </div>
    </div>

    {{!-- Main Content Tabs --}}
    <div class="border-b border-gray-200 mb-8">
      <nav class="-mb-px flex space-x-8 gap-4">
        <button id="assignmentsTab"
                class="tab-button text-sm font-medium pb-4 px-1 border-b-2 transition-colors"
                onclick="switchTab('assignments')">
          Assignments
        </button>
        <button id="studentsTab"
                class="tab-button text-sm font-medium pb-4 px-1 border-b-2 transition-colors"
                onclick="switchTab('students')">
          Students
        </button>
      </nav>
    </div>

    {{!-- Assignments Tab Content --}}
    <div id="assignments-tab" class="tab-content">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-gray-900">Assignments</h2>
        <a href="/teacher/assignments/create/{{classroom._id}}" 
   class="p-2 rounded-full bg-orange-600 hover:bg-orange-700 text-white shadow-sm transition-colors"
   title="Create new assignment">
  <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
  </svg>
</a>
      </div>

      {{!-- Assignment Grid --}}
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {{#each assignments}}
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
          <div class="p-6">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-lg font-semibold text-gray-900">{{this.title}}</h3>
              <span class="px-2.5 py-0.5 rounded-full text-xs font-medium
                         {{#if this.active}}bg-green-100 text-green-800{{else}}bg-gray-100 text-gray-800{{/if}}">
                {{#if this.active}}Active{{else}}Inactive{{/if}}
              </span>
            </div>
            
            <p class="text-sm text-gray-600 mb-4 line-clamp-2">{{this.description}}</p>
            
            <div class="space-y-2 text-sm text-gray-500">
              {{#if this.dueDate}}
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                <span>Due: {{formatDate this.dueDate}}</span>
              </div>
              {{/if}}
              
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <span>{{this.questions.length}} questions</span>
              </div>
              
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
                </svg>
                <span>{{this.submissionCount}} submissions</span>
              </div>
            </div>
            
            <div class="mt-6">
              <a href="/teacher/assignments/{{this._id}}" 
   class="inline-flex items-center text-sm font-medium text-orange-600 hover:text-orange-700">
    View Details
    <svg class="ml-1 w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
    </svg>
</a>
            </div>
          </div>
        </div>
        {{/each}}
      </div>
    </div>

    {{!-- Students Tab Content --}}
    <div id="students-tab" class="tab-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-gray-900">Students</h2>
        <span class="text-sm text-gray-600">Total: {{classroom.students.length}} students</span>
      </div>

      {{!-- Student List --}}
      <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <ul class="divide-y divide-gray-200">
          {{#each classroom.students}}
          <li class="px-4 py-4 sm:px-6">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <span class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-orange-100">
                    <span class="text-sm font-medium leading-none text-orange-700">
                      {{initials this.name}}
                    </span>
                  </span>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-900">{{this.name}}</p>
                  <p class="text-sm text-gray-500">{{this.email}}</p>
                </div>
              </div>
              <button onclick="window.removeStudent('{{this._id}}')" 
                      class="inline-flex items-center p-1 border border-transparent rounded-full 
                             shadow-sm text-white bg-red-600 hover:bg-red-700"
                      title="Remove student">
                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </li>
          {{/each}}
        </ul>
      </div>
    </div>
  </div>
</div>

{{!-- Create Assignment Modal/Page --}}
<div id="createAssignmentModal" class="fixed inset-0 bg-white z-50 overflow-y-auto hidden">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="flex items-center justify-between mb-8">
      <h2 class="text-2xl font-bold text-gray-900">Create New Assignment</h2>
      <button onclick="window.hideCreateAssignmentModal()" 
              class="p-2 rounded-full hover:bg-gray-100 text-gray-500 transition-colors">
        <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>

    <form id="createAssignmentForm" class="space-y-8">
      {{!-- Basic Info --}}
      <div class="bg-white rounded-lg border border-gray-200 p-6">
        <div class="flex justify-between items-center mb-6">
          <h3 class="text-lg font-semibold text-gray-900">Questions</h3>
          <button type="button" onclick="addNewQuestion()"
                  class="inline-flex items-center px-4 py-2 border border-transparent rounded-md 
                         text-sm font-medium text-white bg-orange-600 hover:bg-orange-700">
            <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Add Question
          </button>
        </div>

        <div id="questions-container" class="space-y-6">
          {{!-- Questions will be added here dynamically --}}
        </div>
      </div>

      {{!-- Submit Button --}}
      <div class="flex justify-end space-x-4">
        <button type="button" onclick="window.hideCreateAssignmentModal()"
                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 
                       bg-white hover:bg-gray-50">
          Cancel
        </button>
        <button type="submit"
                class="px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white 
                       bg-orange-600 hover:bg-orange-700">
          Create Assignment
        </button>
      </div>
    </form>
  </div>
</div>

{{!-- Classroom Settings Modal --}}
<div id="classroomSettingsModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
            <div class="sm:flex sm:items-start">
                <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                    <h3 class="text-lg font-semibold leading-6 text-gray-900">Classroom Settings</h3>
                    <form id="classroomSettingsForm" class="mt-4 space-y-4">
                        <div>
                            <label for="className" class="block text-sm font-medium text-gray-700">Class Name</label>
                            <input type="text" name="name" id="className" value="{{classroom.name}}" required
                                   class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 block text-sm font-medium text-gray-700">
                        </div>
                        <div>
                            <label for="classDescription" class="block text-sm font-medium text-gray-700">Description</label>
                            <textarea name="description" id="classDescription" rows="3"
                                      class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 block text-sm font-medium text-gray-700">{{classroom.description}}</textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Status</label>
                            <div class="mt-1 block text-sm font-medium text-gray-700">
                                <label class="inline-flex items-center">
                                    <input type="radio" name="active" value="true" {{#if classroom.active}}checked{{/if}}
                                           class="form-radio text-orange-600">
                                    <span class="ml-2">Active</span>
                                </label>
                                <label class="inline-flex items-center ml-6">
                                    <input type="radio" name="active" value="false" {{#unless classroom.active}}checked{{/unless}}
                                           class="form-radio text-orange-600">
                                    <span class="ml-2">Inactive</span>
                                </label>
                            </div>
                        </div>
                        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                            <button type="submit"
                                    class="inline-flex w-full justify-center rounded-md bg-orange-600 px-3 py-2 
                                           text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:ml-3 sm:w-auto">
                                Save Changes
                            </button>
                            <button type="button" onclick="window.hideClassroomSettings()"
                                    class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 
                                           text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 
                                           hover:bg-gray-50 sm:mt-0 sm:w-auto">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Tab Management
function switchTab(tabName) {
    // Get tab buttons
    const assignmentsTab = document.getElementById('assignmentsTab');
    const studentsTab = document.getElementById('studentsTab');
    
    // Get content divs
    const assignmentsContent = document.getElementById('assignments-tab');
    const studentsContent = document.getElementById('students-tab');
    
    if (tabName === 'assignments') {
        // Update tab styles
        assignmentsTab.classList.add('border-orange-500', 'text-orange-600');
        assignmentsTab.classList.remove('border-transparent', 'text-gray-500');
        studentsTab.classList.add('border-transparent', 'text-gray-500');
        studentsTab.classList.remove('border-orange-500', 'text-orange-600');
        
        // Show/hide content
        assignmentsContent.classList.remove('hidden');
        studentsContent.classList.add('hidden');
    } else {
        // Update tab styles
        studentsTab.classList.add('border-orange-500', 'text-orange-600');
        studentsTab.classList.remove('border-transparent', 'text-gray-500');
        assignmentsTab.classList.add('border-transparent', 'text-gray-500');
        assignmentsTab.classList.remove('border-orange-500', 'text-orange-600');
        
        // Show/hide content
        studentsContent.classList.remove('hidden');
        assignmentsContent.classList.add('hidden');
    }
}

// Assignment Creation
let questionCounter = 0;

{{!-- window.showCreateAssignmentModal = function() {
    document.getElementById('createAssignmentModal').classList.remove('hidden');
}; --}}

window.hideCreateAssignmentModal = function() {
    document.getElementById('createAssignmentModal').classList.add('hidden');
    // Reset form
    document.getElementById('createAssignmentForm').reset();
    document.getElementById('questions-container').innerHTML = '';
    questionCounter = 0;
};

function addNewQuestion() {
    const container = document.getElementById('questions-container');
    const questionId = questionCounter++;
    
    const questionHtml = `
        <div id="question-${questionId}" class="bg-gray-50 rounded-lg p-6 space-y-4">
            <div class="flex justify-between items-start">
                <h4 class="text-base font-medium text-gray-900">Question ${questionCounter}</h4>
                <button type="button" onclick="removeQuestion(${questionId})"
                        class="p-1 text-gray-400 hover:text-red-500">
                    <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Question</label>
                <textarea name="questions[${questionId}][question]" rows="4" required
                          class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                 focus:border-orange-500 focus:ring-orange-500"
                          placeholder="Enter your question here..."></textarea>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Answer (Optional)</label>
                <textarea name="questions[${questionId}][solution]" rows="3"
                          class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                 focus:border-orange-500 focus:ring-orange-500"
                          placeholder="Enter the answer here..."></textarea>
            </div>

            <input type="hidden" name="questions[${questionId}][type]" value="math">
        </div>
    `;
    
    const temp = document.createElement('div');
    temp.innerHTML = questionHtml;
    container.appendChild(temp.firstElementChild);
}

function removeQuestion(questionId) {
    const question = document.getElementById(`question-${questionId}`);
    question.remove();
}

// Classroom Management
window.showClassroomSettings = function() {
    document.getElementById('classroomSettingsModal').classList.remove('hidden');
};

window.hideClassroomSettings = function() {
    document.getElementById('classroomSettingsModal').classList.add('hidden');
};

window.generateNewCode = async function() {
    try {
        const response = await fetch(`/api/classrooms/{{classroom._id}}/new-code`, {
            method: 'POST'
        });
        
        if (!response.ok) throw new Error('Failed to generate new code');
        
        const data = await response.json();
        window.location.reload();
    } catch (error) {
        console.error('Error generating new code:', error);
        alert('Failed to generate new code. Please try again.');
    }
};

window.removeStudent = async function(studentId) {
    if (!confirm('Are you sure you want to remove this student from the classroom?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/classrooms/{{classroom._id}}/students/${studentId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to remove student');
        
        window.location.reload();
    } catch (error) {
        console.error('Error removing student:', error);
        alert('Failed to remove student. Please try again.');
    }
};

// Form Submissions
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tab state
    switchTab('assignments');

    // Assignment creation form handler
    document.getElementById('createAssignmentForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            const formData = new FormData(e.target);
            const questions = [];
            
            // Process questions data
            const questionElements = document.querySelectorAll('[id^="question-"]');
            questionElements.forEach((element, index) => {
                questions.push({
                    question: formData.get(`questions[${index}][question]`),
                    solution: formData.get(`questions[${index}][solution]`),
                    type: formData.get(`questions[${index}][type]`)
                });
            });

            const response = await fetch('/api/assignments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    classroomId: '{{classroom._id}}',
                    title: formData.get('title'),
                    description: formData.get('description'),
                    dueDate: formData.get('dueDate'),
                    questions: questions
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to create assignment');
            }

            const assignment = await response.json();
            console.log('Created assignment:', assignment);
            
            // Hide modal and reset form
            window.hideCreateAssignmentModal();
            
            // Refresh the page to show new assignment
            window.location.reload();
        } catch (error) {
            console.error('Error creating assignment:', error);
            alert('Failed to create assignment: ' + error.message);
        }
    });

    // Classroom settings form handler
    document.getElementById('classroomSettingsForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            const formData = new FormData(e.target);
            const response = await fetch('/api/classrooms/{{classroom._id}}', {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: formData.get('name'),
                    description: formData.get('description'),
                    active: formData.get('active') === 'true'
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to update classroom');
            }

            window.hideClassroomSettings();
            window.location.reload();
        } catch (error) {
            console.error('Error updating classroom:', error);
            alert('Failed to update classroom: ' + error.message);
        }
    });
});
</script>

<script>
// Assignment Creation
let questionCounter = 0;

{{!-- window.showCreateAssignmentModal = function() {
    document.getElementById('createAssignmentModal').classList.remove('hidden');
}; --}}

window.hideCreateAssignmentModal = function() {
    document.getElementById('createAssignmentModal').classList.add('hidden');
    // Reset form
    document.getElementById('createAssignmentForm').reset();
    document.getElementById('questions-container').innerHTML = '';
    document.getElementById('no-questions').style.display = 'block';
    questionCounter = 0;
};

function addNewQuestion() {
    const container = document.getElementById('questions-container');
    const noQuestions = document.getElementById('no-questions');
    const questionId = questionCounter++;
    
    // Hide the "no questions" message when adding the first question
    if (noQuestions) {
        noQuestions.style.display = 'none';
    }
    
    const questionHtml = `
        <div id="question-${questionId}" class="bg-white rounded-lg border border-gray-200 shadow-sm">
            <div class="p-6 space-y-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <span class="flex-shrink-0 flex items-center justify-center h-8 w-8 rounded-full bg-orange-100 text-orange-600 text-sm font-medium">
                            ${questionCounter}
                        </span>
                        <h4 class="ml-3 text-base font-medium text-gray-900">Question ${questionCounter}</h4>
                    </div>
                    <button type="button" onclick="removeQuestion(${questionId})"
                            class="p-2 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 transition-colors"
                            title="Remove question">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Question Text</label>
                    <div class="relative">
                        <textarea name="questions[${questionId}][question]" rows="4" required
                                  class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                         focus:border-orange-500 focus:ring-orange-500 resize-none"
                                  placeholder="Write your math question here..."></textarea>
                        <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                            Use LaTeX for equations, e.g., \\( x^2 \\)
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Solution (Optional)</label>
                    <div class="relative">
                        <textarea name="questions[${questionId}][solution]" rows="3"
                                  class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                         focus:border-orange-500 focus:ring-orange-500 resize-none"
                                  placeholder="Enter the solution or answer key..."></textarea>
                        <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                            Include step-by-step solution if needed
                        </div>
                    </div>
                </div>

                <input type="hidden" name="questions[${questionId}][type]" value="math">
            </div>
        </div>
    `;
    
    const temp = document.createElement('div');
    temp.innerHTML = questionHtml;
    container.appendChild(temp.firstElementChild);
}

function removeQuestion(questionId) {
    const question = document.getElementById(`question-${questionId}`);
    const questionsContainer = document.getElementById('questions-container');
    const noQuestions = document.getElementById('no-questions');

    // Add a subtle fade-out effect before removing
    question.style.transition = 'opacity 0.2s ease-out';
    question.style.opacity = '0';
    
    setTimeout(() => {
        question.remove();
        
        // Show the "no questions" message if this was the last question
        if (questionsContainer.children.length === 0 && noQuestions) {
            noQuestions.style.display = 'block';
        }
    }, 200);
}

// Form Submissions
document.addEventListener('DOMContentLoaded', function() {
    // Assignment creation form handler
    document.getElementById('createAssignmentForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            const formData = new FormData(e.target);
            const questions = [];
            
            // Process questions data
            const questionElements = document.querySelectorAll('[id^="question-"]');
            questionElements.forEach((element, index) => {
                questions.push({
                    question: formData.get(`questions[${index}][question]`),
                    solution: formData.get(`questions[${index}][solution]`),
                    type: formData.get(`questions[${index}][type]`)
                });
            });

            if (questions.length === 0) {
                throw new Error('Please add at least one question to the assignment');
            }

            const response = await fetch('/api/assignments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    classroomId: '{{classroom._id}}',
                    title: formData.get('title'),
                    description: formData.get('description'),
                    dueDate: formData.get('dueDate'),
                    questions: questions
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to create assignment');
            }

            const assignment = await response.json();
            console.log('Created assignment:', assignment);
            
            // Hide modal and reset form
            window.hideCreateAssignmentModal();
            
            // Refresh the page to show new assignment
            window.location.reload();
        } catch (error) {
            console.error('Error creating assignment:', error);
            alert(error.message);
        }
    });
});
</script>