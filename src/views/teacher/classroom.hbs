{{!-- src/views/teacher/classroom.hbs --}}
<div class="min-h-screen bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    {{!-- Classroom Header --}}
    <div class="border-b border-gray-200 pb-8 mb-8">
      <div class="flex justify-between items-start">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">{{classroom.name}}</h1>
          <p class="mt-2 text-sm text-gray-600">{{classroom.description}}</p>
        </div>
        <div class="flex items-center space-x-4">
          {{!-- Join Code Display --}}
          <div class="bg-orange-50 rounded-lg px-4 py-2">
            <p class="text-sm text-gray-600">Join Code:</p>
            <div class="flex items-center space-x-2">
              <span class="text-lg font-mono font-bold text-orange-600">{{classroom.code}}</span>
              <button onclick="generateNewCode()" 
                      class="text-orange-600 hover:text-orange-500"
                      title="Generate New Code">
                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                </svg>
              </button>
            </div>
          </div>
          {{!-- Settings Button --}}
          <button onclick="showClassroomSettings()" 
                  class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md 
                         shadow-sm text-sm font-medium text-gray-700 bg-white 
                         hover:bg-gray-50 focus:outline-none focus:ring-2 
                         focus:ring-offset-2 focus:ring-orange-500">
            <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
            Settings
          </button>
        </div>
      </div>
    </div>

    {{!-- Main Content Tabs --}}
    <div class="border-b border-gray-200 mb-8">
      <nav class="-mb-px flex space-x-8">
        <button onclick="switchTab('assignments')" 
                class="tab-button border-orange-500 text-orange-600 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm">
          Assignments
        </button>
        <button onclick="switchTab('students')" 
                class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 
                       whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm">
          Students
        </button>
      </nav>
    </div>

    {{!-- Assignments Tab Content --}}
    <div id="assignments-tab" class="tab-content">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-gray-900">Assignments</h2>
        <button onclick="showCreateAssignmentModal()" 
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm 
                       text-sm font-medium text-white bg-orange-600 hover:bg-orange-700">
          <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          New Assignment
        </button>
      </div>

      {{!-- Assignment List --}}
      <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <ul class="divide-y divide-gray-200">
          {{#each assignments}}
          <li>
            <a href="/teacher/assignments/{{this._id}}" class="block hover:bg-gray-50">
              <div class="px-4 py-4 sm:px-6">
                <div class="flex items-center justify-between">
                  <div class="flex items-center">
                    <p class="text-sm font-medium text-orange-600 truncate">{{this.title}}</p>
                    {{#if this.dueDate}}
                    <p class="ml-4 text-xs text-gray-500">Due: {{formatDate this.dueDate}}</p>
                    {{/if}}
                  </div>
                  <div class="flex items-center">
                    <span class="px-2.5 py-0.5 rounded-full text-xs font-medium
                               {{#if this.active}}bg-green-100 text-green-800{{else}}bg-gray-100 text-gray-800{{/if}}">
                      {{#if this.active}}Active{{else}}Inactive{{/if}}
                    </span>
                    <svg class="ml-4 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  </div>
                </div>
                <div class="mt-2">
                  <p class="text-sm text-gray-600 line-clamp-2">{{this.description}}</p>
                  <div class="mt-2 flex items-center text-sm text-gray-500">
                    <span>{{this.questions.length}} questions</span>
                    <span class="mx-2">â€¢</span>
                    <span>{{this.submissionCount}} submissions</span>
                  </div>
                </div>
              </div>
            </a>
          </li>
          {{/each}}
        </ul>
      </div>
    </div>

    {{!-- Students Tab Content --}}
    <div id="students-tab" class="tab-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-gray-900">Students</h2>
        <span class="text-sm text-gray-600">Total: {{classroom.students.length}} students</span>
      </div>

      {{!-- Student List --}}
      <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <ul class="divide-y divide-gray-200">
          {{#each classroom.students}}
          <li class="px-4 py-4 sm:px-6">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <span class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-orange-100">
                    <span class="text-sm font-medium leading-none text-orange-700">
                      {{initials this.name}}
                    </span>
                  </span>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-900">{{this.name}}</p>
                  <p class="text-sm text-gray-500">{{this.email}}</p>
                </div>
              </div>
              <button onclick="removeStudent('{{this._id}}')" 
                      class="inline-flex items-center p-1 border border-transparent rounded-full 
                             shadow-sm text-white bg-red-600 hover:bg-red-700"
                      title="Remove student">
                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </li>
          {{/each}}
        </ul>
      </div>
    </div>
  </div>
</div>

{{!-- Classroom Settings Modal --}}
<div id="classroomSettingsModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
    <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
      <div class="sm:flex sm:items-start">
        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
          <h3 class="text-lg font-semibold leading-6 text-gray-900">Classroom Settings</h3>
          <form id="classroomSettingsForm" class="mt-4 space-y-4">
            <div>
              <label for="className" class="block text-sm font-medium text-gray-700">Class Name</label>
              <input type="text" name="name" id="className" value="{{classroom.name}}" required
                     class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2">
            </div>
            <div>
              <label for="classDescription" class="block text-sm font-medium text-gray-700">Description</label>
              <textarea name="description" id="classDescription" rows="3"
                        class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2">{{classroom.description}}</textarea>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Status</label>
              <div class="mt-1">
                <label class="inline-flex items-center">
                  <input type="radio" name="active" value="true" {{#if classroom.active}}checked{{/if}}
                         class="form-radio text-orange-600">
                  <span class="ml-2">Active</span>
                </label>
                <label class="inline-flex items-center ml-6">
                  <input type="radio" name="active" value="false" {{#unless classroom.active}}checked{{/unless}}
                         class="form-radio text-orange-600">
                  <span class="ml-2">Inactive</span>
                </label>
              </div>
            </div>
            <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
              <button type="submit"
                      class="inline-flex w-full justify-center rounded-md bg-orange-600 px-3 py-2 
                             text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:ml-3 sm:w-auto">
                Save Changes
              </button>
              <button type="button" onclick="hideClassroomSettings()"
                      class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 
                             text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 
                             hover:bg-gray-50 sm:mt-0 sm:w-auto">
                Cancel
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Tab Management
function switchTab(tabName) {
    const tabs = document.querySelectorAll('.tab-button');
    const contents = document.querySelectorAll('.tab-content');
    
    tabs.forEach(tab => {
        if (tab.textContent.trim().toLowerCase() === tabName) {
            tab.classList.add('border-orange-500', 'text-orange-600');
            tab.classList.remove('border-transparent', 'text-gray-500');
        } else {
            tab.classList.remove('border-orange-500', 'text-orange-600');
            tab.classList.add('border-transparent', 'text-gray-500');
        }
    });
    
    contents.forEach(content => {
        if (content.id === `${tabName}-tab`) {
            content.classList.remove('hidden');
        } else {
            content.classList.add('hidden');
        }
    });
}

// Modal Management
function showClassroomSettings() {
    document.getElementById('classroomSettingsModal').classList.remove('hidden');
}

function hideClassroomSettings() {
    document.getElementById('classroomSettingsModal').classList.add('hidden');
}

// Classroom Management
async function generateNewCode() {
    try {
        const response = await fetch(`/api/classrooms/{{classroom._id}}/new-code`, {
            method: 'POST'
        });
        
        if (!response.ok) throw new Error('Failed to generate new code');
        
        const data = await response.json();
        window.location.reload();
    } catch (error) {
        console.error('Error generating new code:', error);
        alert('Failed to generate new code. Please try again.');
    }
}

async function removeStudent(studentId) {
    if (!confirm('Are you sure you want to remove this student from the classroom?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/classrooms/{{classroom._id}}/students/${studentId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to remove student');
        
        window.location.reload();
    } catch (error) {
        console.error('Error removing student:', error);
        alert('Failed to remove student. Please try again.');
    }
}

// Form Submissions
document.getElementById('classroomSettingsForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const formData = new FormData(e.target);
        const response = await fetch('/api/classrooms/{{classroom._id}}', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: formData.get('name'),
                description: formData.get('description'),
                active: formData.get('active') === 'true'
            })
        });

        if (!response.ok) throw new Error('Failed to update classroom');

        hideClassroomSettings();
        window.location.reload();
    } catch (error) {
        console.error('Error updating classroom:', error);
        alert('Failed to update classroom. Please try again.');
    }
});
</script>