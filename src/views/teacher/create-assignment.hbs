{{!-- src/views/teacher/create-assignment.hbs --}}
<div class="min-h-screen bg-white">
  <div class="max-w-5xl mx-auto px-6 py-10">
    {{!-- Header --}}
    <div class="flex items-center gap-4 mb-10">
      <a href="/teacher/classroom/{{classroom._id}}" 
         class="inline-flex items-center justify-center p-2 text-gray-500 hover:text-gray-700 
                hover:bg-gray-100 rounded-lg transition-colors">
        ← Back
      </a>
      <div>
        <h1 class="text-2xl font-bold text-gray-900">New Assignment</h1>
        <p class="text-sm text-gray-500">{{classroom.name}}</p>
      </div>
    </div>

    <form id="createAssignmentForm" method="POST" action="/teacher/assignments/create">
      <input type="hidden" name="classroomId" value="{{classroom._id}}">
      
      <div class="flex gap-8">
        {{!-- Left Column: Basic Info --}}
        <div class="w-1/3">
          <div class="bg-white rounded-lg border border-gray-200 p-8 space-y-6 sticky top-8 shadow">
            <div>
              <label for="title" class="block text-sm font-medium mb-2 text-gray-700">Assignment Title</label>
              <input type="text" name="title" id="title" required
                     class="block w-full rounded-md border border-gray-300 shadow-sm 
                            focus:border-orange-500 focus:0.5 focus:ring-orange-500 text-sm p-3 text-gray-700"
                     placeholder="e.g., Week 1 Problems">
            </div>

            <div>
              <label for="description" class="block text-sm font-medium text-gray-900 mb-2 text-gray-700">Description</label>
              <textarea name="description" id="description"
                        class="block w-full h-24 rounded-md border border-gray-300 shadow-sm resize-none
                               focus:border-orange-500 focus:0.5 focus:ring-orange-500 text-sm p-3 text-gray-700"
                        placeholder="Optional assignment description..."></textarea>
            </div>

            <div>
              <label for="dueDate" class="block text-sm font-medium text-gray-900 mb-2">Due Date</label>
              <input type="datetime-local" name="dueDate" id="dueDate"
                     class="block w-full rounded-md border border-gray-300 shadow-sm 
                            focus:border-orange-500 focus:ring-0.5 focus:ring-orange-500 text-sm p-3 text-gray-700">
            </div>

            <div class="flex items-center justify-between pt-4 border-t border-gray-200">
              <span class="text-sm font-medium text-gray-900">Questions</span>
              <span class="text-sm text-gray-500" id="questionCount">0 added</span>
            </div>

            <div class="flex gap-3 pt-2">
              <a href="/teacher/classroom/{{classroom._id}}" 
                 class="flex-1 inline-flex justify-center px-4 py-2 rounded-md text-sm 
                        font-medium text-gray-700 bg-white border border-gray-300 
                        hover:bg-gray-50 transition-colors">
                Cancel
              </a>
              <button type="submit"
                      class="flex-1 inline-flex justify-center px-4 py-2 rounded-md text-sm 
                             font-medium text-white bg-orange-600 hover:bg-orange-700 transition-colors">
                Create
              </button>
            </div>
          </div>
        </div>

        {{!-- Right Column: Questions --}}
        <div class="flex-1">
          {{!-- Empty State --}}
          <div id="no-questions" class="bg-white rounded-lg border border-gray-200 p-10 shadow text-center">
            <h3 class="text-xl font-semibold text-gray-900 mb-4">No Questions Yet</h3>
            <p class="text-sm text-gray-500 mb-6 max-w-md mx-auto">
              Start by adding your first math problem. You can include LaTeX equations and provide an optional solution.
            </p>
            <button type="button" onclick="addNewQuestion()"
                    class="inline-flex items-center px-6 py-3 rounded-md text-sm font-medium
                           text-white bg-orange-600 hover:bg-orange-700 transition-colors">
              + Add Question
            </button>
          </div>

          {{!-- Questions List --}}
          <div id="questions-container" class="space-y-6">
            <!-- Questions will be added here dynamically -->
          </div>

          {{!-- Add Question Button (shown when questions exist) --}}
          <div id="add-more" class="hidden mt-8">
            <button type="button" onclick="addNewQuestion()"
                    class="w-full rounded-lg border-2 border-dashed border-gray-300 
                           p-6 text-sm text-gray-500 hover:text-orange-600 hover:border-orange-500 
                           transition-colors">
              + Add Another Question
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<script>
let questionCounter = 0;

function updateQuestionCount() {
  const count = document.querySelectorAll('[id^="question-"]').length;
  document.getElementById('questionCount').textContent = `${count} added`;
  document.getElementById('add-more').style.display = count > 0 ? 'block' : 'none';
  updateQuestionNumbers();
}

function updateQuestionNumbers() {
  const questionElements = document.querySelectorAll('[id^="question-"]');
  questionElements.forEach((el, index) => {
    const numberEl = el.querySelector('.question-number');
    if (numberEl) {
      numberEl.textContent = index + 1;
    }
  });
}

function addNewQuestion() {
  const container = document.getElementById('questions-container');
  const noQuestions = document.getElementById('no-questions');
  const currentId = questionCounter++;
  
  if (noQuestions) {
    noQuestions.style.display = 'none';
  }
  
  const questionHtml = `
    <div id="question-${currentId}" class="bg-white rounded-lg border border-gray-200 shadow p-6">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-3">
          <span class="question-number inline-flex items-center justify-center h-7 w-7 rounded-full 
                     bg-gray-100 text-gray-700 text-sm font-medium">
            ${document.querySelectorAll('[id^="question-"]').length + 1}
          </span>
          <span class="text-sm font-medium text-gray-900">Question</span>
        </div>
        <button type="button" onclick="removeQuestion(${currentId})"
                class="text-gray-400 hover:text-red-500 p-1"
                title="Remove question">×</button>
      </div>

      <div class="mb-4">
        <textarea name="questions[${currentId}][question]" required
                  class="block w-full h-32 rounded-md border border-gray-300 shadow-sm resize-none
                         focus:border-orange-500 focus:ring-0.5 focus:ring-orange-500 text-sm p-3 text-gray-700"
                  placeholder="Write your question here..."></textarea>
        <div class="mt-1 text-xs text-gray-500">
          Use LaTeX for equations, e.g., $x^2 $
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Solution (Optional)</label>
        <textarea name="questions[${currentId}][solution]"
                  class="block w-full h-24 rounded-md border border-gray-300 shadow-sm resize-none
                         focus:border-orange-500 focus:ring-0.5 focus:ring-orange-500 text-sm p-3 text-gray-700"
                  placeholder="Add a solution or answer key..."></textarea>
      </div>

      <input type="hidden" name="questions[${currentId}][type]" value="math">
    </div>
  `;
  
  const temp = document.createElement('div');
  temp.innerHTML = questionHtml;
  container.appendChild(temp.firstElementChild);
  updateQuestionCount();

  // Focus on the new question's textarea
  const newTextarea = container.lastElementChild.querySelector('textarea');
  newTextarea.focus();
}

function removeQuestion(questionId) {
  const question = document.getElementById(`question-${questionId}`);
  const container = document.getElementById('questions-container');
  const noQuestions = document.getElementById('no-questions');

  question.style.opacity = '0';
  question.style.height = question.offsetHeight + 'px';
  question.style.transition = 'all 0.2s ease-out';
  question.style.overflow = 'hidden';
  
  setTimeout(() => {
    question.style.height = '0';
    question.style.margin = '0';
    question.style.padding = '0';
    
    setTimeout(() => {
      question.remove();
      if (container.children.length === 0 && noQuestions) {
        noQuestions.style.display = 'block';
      }
      updateQuestionCount();
    }, 200);
  }, 50);
}

document.getElementById('createAssignmentForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  try {
    const formData = new FormData(e.target);
    const questions = [];
    
    const questionElements = document.querySelectorAll('[id^="question-"]');
    if (questionElements.length === 0) {
      throw new Error('Please add at least one question to the assignment');
    }

    questionElements.forEach((element) => {
      const id = element.id.split('-')[1];
      questions.push({
        question: formData.get(`questions[${id}][question]`),
        solution: formData.get(`questions[${id}][solution]`),
        type: formData.get(`questions[${id}][type]`)
      });
    });

    const response = await fetch('/api/assignments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        classroomId: formData.get('classroomId'),
        title: formData.get('title'),
        description: formData.get('description'),
        dueDate: formData.get('dueDate'),
        questions: questions
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to create assignment');
    }

    window.location.href = `/teacher/classroom/${formData.get('classroomId')}`;
  } catch (error) {
    alert(error.message);
  }
});
</script>
