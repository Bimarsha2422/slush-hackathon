{{!-- src/views/teacher/dashboard.hbs --}}
<div class="min-h-screen bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    {{!-- Teacher Stats Overview --}}
    <div class="mb-8">
      <h1 class="text-2xl font-bold text-gray-900">Teacher Dashboard</h1>
      <div class="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-3">
        {{!-- Active Classrooms --}}
        <div class="bg-orange-50/50 backdrop-blur-md border border-orange-200 rounded-lg p-6">
          <h3 class="text-lg font-medium text-gray-900">Active Classrooms</h3>
          <p class="mt-2 text-3xl font-bold text-orange-500">{{stats.classroomCount}}</p>
        </div>
        {{!-- Total Students --}}
        <div class="bg-orange-50/50 backdrop-blur-md border border-orange-200 rounded-lg p-6">
          <h3 class="text-lg font-medium text-gray-900">Total Students</h3>
          <p class="mt-2 text-3xl font-bold text-orange-500">{{stats.studentCount}}</p>
        </div>
        {{!-- Active Assignments --}}
        <div class="bg-orange-50/50 backdrop-blur-md border border-orange-200 rounded-lg p-6">
          <h3 class="text-lg font-medium text-gray-900">Active Assignments</h3>
          <p class="mt-2 text-3xl font-bold text-orange-500">{{stats.assignmentCount}}</p>
        </div>
      </div>
    </div>

    {{!-- Quick Actions --}}
    <div class="mb-8">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-900">Quick Actions</h2>
      </div>
      <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
        <button onclick="showCreateClassroomModal()" 
                class="flex items-center justify-center p-6 bg-orange-50 border border-orange-200 
                       rounded-lg hover:bg-orange-100 transition-colors">
          <span class="mr-2">
            <svg class="w-6 h-6 text-orange-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
          </span>
          Create New Classroom
        </button>
        <button onclick="showCreateAssignmentModal()" 
                class="flex items-center justify-center p-6 bg-orange-50 border border-orange-200 
                       rounded-lg hover:bg-orange-100 transition-colors">
          <span class="mr-2">
            <svg class="w-6 h-6 text-orange-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
            </svg>
          </span>
          Create New Assignment
        </button>
        <button onclick="location.href='/teacher/progress'" 
                class="flex items-center justify-center p-6 bg-orange-50 border border-orange-200 
                       rounded-lg hover:bg-orange-100 transition-colors">
          <span class="mr-2">
            <svg class="w-6 h-6 text-orange-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
            </svg>
          </span>
          View Progress Overview
        </button>
      </div>
    </div>

    {{!-- Recent Activity --}}
    <div>
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Recent Activity</h2>
      <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
        <ul class="divide-y divide-gray-200">
          {{#each recentActivity}}
          <li class="p-4 hover:bg-gray-50">
            <div class="flex items-center space-x-4">
              <div class="flex-shrink-0">
                {{#if (eq this.type "classroom")}}
                <span class="p-2 bg-orange-100 text-orange-600 rounded-full">
                  <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
                  </svg>
                </span>
                {{else if (eq this.type "assignment")}}
                <span class="p-2 bg-green-100 text-green-600 rounded-full">
                  <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                  </svg>
                </span>
                {{else}}
                <span class="p-2 bg-blue-100 text-blue-600 rounded-full">
                  <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
                  </svg>
                </span>
                {{/if}}
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-sm font-medium text-gray-900">{{this.message}}</p>
                <p class="text-sm text-gray-500">{{this.timestamp}}</p>
              </div>
            </div>
          </li>
          {{/each}}
        </ul>
      </div>
    </div>
  </div>
</div>

{{!-- Create Classroom Modal --}}
<div id="createClassroomModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
    <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
      <div class="absolute right-0 top-0 pr-4 pt-4">
        <button type="button" onclick="hideCreateClassroomModal()" 
                class="rounded-md bg-white text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div class="sm:flex sm:items-start">
        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
          <h3 class="text-lg font-semibold leading-6 text-gray-900">Create New Classroom</h3>
          <div class="mt-4">
            <form id="createClassroomForm" class="space-y-4">
              <div>
                <label for="className" class="block text-sm font-medium text-gray-700">Class Name</label>
                <input type="text" name="name" id="className" required
                       class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                              focus:border-orange-500 focus:ring-orange-500">
              </div>
              <div>
                <label for="classDescription" class="block text-sm font-medium text-gray-700">Description</label>
                <textarea name="description" id="classDescription" rows="3"
                          class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                 focus:border-orange-500 focus:ring-orange-500"></textarea>
              </div>
              <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                <button type="submit"
                        class="inline-flex w-full justify-center rounded-md bg-orange-600 px-3 py-2 
                               text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:ml-3 sm:w-auto">
                  Create Classroom
                </button>
                <button type="button" onclick="hideCreateClassroomModal()"
                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 
                               text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 
                               hover:bg-gray-50 sm:mt-0 sm:w-auto">
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{{!-- Create Assignment Modal --}}
<div id="createAssignmentModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
    <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
      <div class="absolute right-0 top-0 pr-4 pt-4">
        <button type="button" onclick="hideCreateAssignmentModal()" 
                class="rounded-md bg-white text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div class="sm:flex sm:items-start">
        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
          <h3 class="text-lg font-semibold leading-6 text-gray-900">Create New Assignment</h3>
          <div class="mt-4">
            <form id="createAssignmentForm" class="space-y-4">
              <div>
                <label for="classroom" class="block text-sm font-medium text-gray-700">Classroom</label>
                <select name="classroomId" id="classroom" required
                        class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                               focus:border-orange-500 focus:ring-orange-500">
                  {{#each classrooms}}
                  <option value="{{this._id}}">{{this.name}}</option>
                  {{/each}}
                </select>
              </div>
              <div>
                <label for="assignmentTitle" class="block text-sm font-medium text-gray-700">Title</label>
                <input type="text" name="title" id="assignmentTitle" required
                       class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                              focus:border-orange-500 focus:ring-orange-500">
              </div>
              <div>
                <label for="assignmentDescription" class="block text-sm font-medium text-gray-700">Description</label>
                <textarea name="description" id="assignmentDescription" rows="3"
                          class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                 focus:border-orange-500 focus:ring-orange-500"></textarea>
              </div>
              <div>
                <label for="dueDate" class="block text-sm font-medium text-gray-700">Due Date</label>
                <input type="datetime-local" name="dueDate" id="dueDate"
                       class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                              focus:border-orange-500 focus:ring-orange-500">
              </div>
              <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                <button type="submit"
                        class="inline-flex w-full justify-center rounded-md bg-orange-600 px-3 py-2 
                               text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:ml-3 sm:w-auto">
                  Create Assignment
                </button>
                <button type="button" onclick="hideCreateAssignmentModal()"
                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 
                               text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 
                               hover:bg-gray-50 sm:mt-0 sm:w-auto">
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Modal Management
function showCreateClassroomModal() {
    document.getElementById('createClassroomModal').classList.remove('hidden');
}

function hideCreateClassroomModal() {
    document.getElementById('createClassroomModal').classList.add('hidden');
}

function showCreateAssignmentModal() {
    document.getElementById('createAssignmentModal').classList.remove('hidden');
}

function hideCreateAssignmentModal() {
    document.getElementById('createAssignmentModal').classList.add('hidden');
}

// Form Submissions
document.getElementById('createClassroomForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const formData = new FormData(e.target);
        const response = await fetch('/api/classrooms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: formData.get('name'),
                description: formData.get('description')
            })
        });

        if (!response.ok) {
            throw new Error('Failed to create classroom');
        }

        const classroom = await response.json();
        hideCreateClassroomModal();
        window.location.reload();
    } catch (error) {
        console.error('Error creating classroom:', error);
        alert('Failed to create classroom. Please try again.');
    }
});

document.getElementById('createAssignmentForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const formData = new FormData(e.target);
        const response = await fetch('/api/assignments', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                classroomId: formData.get('classroomId'),
                title: formData.get('title'),
                description: formData.get('description'),
                dueDate: formData.get('dueDate')
            })
        });

        if (!response.ok) {
            throw new Error('Failed to create assignment');
        }

        const assignment = await response.json();
        hideCreateAssignmentModal();
        // Redirect to assignment editor
        window.location.href = `/teacher/assignments/${assignment._id}/edit`;
    } catch (error) {
        console.error('Error creating assignment:', error);
        alert('Failed to create assignment. Please try again.');
    }
});
</script>