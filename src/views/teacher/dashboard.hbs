{{!-- src/views/teacher/dashboard.hbs --}}
<div class="min-h-screen bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {{!-- Teacher Stats Overview --}}
        <div class="mb-8">
            <h1 class="text-2xl font-bold text-gray-900">Teacher Dashboard</h1>
            <div class="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-3">
                {{!-- Stats cards --}}
                <div class="bg-orange-50/50 backdrop-blur-md border border-orange-200 rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900">Active Classrooms</h3>
                    <p class="mt-2 text-3xl font-bold text-orange-500">{{stats.classroomCount}}</p>
                </div>
                <div class="bg-orange-50/50 backdrop-blur-md border border-orange-200 rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900">Total Students</h3>
                    <p class="mt-2 text-3xl font-bold text-orange-500">{{stats.studentCount}}</p>
                </div>
                <div class="bg-orange-50/50 backdrop-blur-md border border-orange-200 rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900">Active Assignments</h3>
                    <p class="mt-2 text-3xl font-bold text-orange-500">{{stats.assignmentCount}}</p>
                </div>
            </div>
        </div>

        {{!-- Quick Actions and Classrooms Grid --}}
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            {{!-- Classrooms List --}}
            <div>
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-900">Your Classrooms</h2>
                    <button onclick="window.showCreateClassroomModal()" 
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm 
                                   text-sm font-medium text-white bg-orange-600 hover:bg-orange-700">
                        <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                        New Classroom
                    </button>
                </div>
                
                <div class="space-y-4">
                    {{#each classrooms}}
                    <a href="/teacher/classroom/{{this._id}}" 
                       class="block p-6 bg-orange-50/50 backdrop-blur-md border border-orange-200 
                              rounded-lg hover:bg-orange-100/50 transition-colors">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="text-lg font-medium text-gray-900">{{this.name}}</h3>
                                <p class="mt-1 text-sm text-gray-600">{{this.students.length}} students</p>
                            </div>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                       {{#if this.active}}bg-green-100 text-green-800{{else}}bg-gray-100 text-gray-800{{/if}}">
                                {{#if this.active}}Active{{else}}Inactive{{/if}}
                            </span>
                        </div>
                        <p class="mt-2 text-sm text-gray-600 line-clamp-2">{{this.description}}</p>
                    </a>
                    {{/each}}
                </div>
            </div>

            {{!-- Recent Activity --}}
            <div>
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Recent Activity</h2>
                <div class="bg-white shadow overflow-hidden sm:rounded-md">
                    <ul class="divide-y divide-gray-200">
                        {{#each recentActivity}}
                        <li class="p-4">
                            <div class="flex items-center space-x-4">
                                <div class="flex-shrink-0">
                                    {{#if (eq this.type "classroom")}}
                                    <span class="p-2 bg-orange-100 text-orange-600 rounded-full">
                                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                  d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
                                        </svg>
                                    </span>
                                    {{else}}
                                    <span class="p-2 bg-blue-100 text-blue-600 rounded-full">
                                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                                        </svg>
                                    </span>
                                    {{/if}}
                                </div>
                                <div class="min-w-0 flex-1">
                                    <p class="text-sm font-medium text-gray-900">{{this.message}}</p>
                                    <p class="text-sm text-gray-500">{{formatDate this.timestamp}}</p>
                                </div>
                            </div>
                        </li>
                        {{/each
}}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

{{!-- Create Classroom Modal --}}
<div id="createClassroomModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
            <div class="absolute right-0 top-0 pr-4 pt-4">
                <button type="button" onclick="window.hideCreateClassroomModal()" 
                        class="rounded-md bg-white text-gray-400 hover:text-gray-500">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>

            <div class="sm:flex sm:items-start">
                <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                    <h3 class="text-lg font-semibold leading-6 text-gray-900">Create New Classroom</h3>
                    <div class="mt-4">
                        <form id="createClassroomForm" class="space-y-4">
                            <div>
                                <label for="className" class="block text-sm font-medium text-gray-700">Class Name</label>
                                <input type="text" name="name" id="className" required
                                       class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                              focus:border-orange-500 focus:ring-orange-500">
                            </div>

                            <div>
                                <label for="classDescription" class="block text-sm font-medium text-gray-700">Description</label>
                                <textarea name="description" id="classDescription" rows="3"
                                          class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 
                                                 focus:border-orange-500 focus:ring-orange-500"></textarea>
                            </div>

                            <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                                <button type="submit"
                                        class="inline-flex w-full justify-center rounded-md bg-orange-600 px-3 py-2 
                                               text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:ml-3 sm:w-auto">
                                    Create Classroom
                                </button>
                                <button type="button" onclick="window.hideCreateClassroomModal()"
                                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 
                                               text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 
                                               hover:bg-gray-50 sm:mt-0 sm:w-auto">
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Make functions globally available by attaching to window
window.showCreateClassroomModal = function() {
    document.getElementById('createClassroomModal').classList.remove('hidden');
};

window.hideCreateClassroomModal = function() {
    document.getElementById('createClassroomModal').classList.add('hidden');
};

// Form submission handling
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('createClassroomForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            const formData = new FormData(e.target);
            const response = await fetch('/api/classrooms', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: formData.get('name'),
                    description: formData.get('description')
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to create classroom');
            }

            const classroom = await response.json();
            console.log('Created classroom:', classroom);
            
            // Hide modal and reset form
            window.hideCreateClassroomModal();
            e.target.reset();
            
            // Refresh the page to show new classroom
            window.location.reload();
        } catch (error) {
            console.error('Error creating classroom:', error);
            alert('Failed to create classroom: ' + error.message);
        }
    });
});</script>